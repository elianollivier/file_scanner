[
  {
    "kind": "File",
    "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\00API.py",
    "content": "from openpyxl import Workbook\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime\r\nimport time\r\nimport json\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom googleapiclient.discovery import build\r\nfrom googleapiclient.errors import HttpError\r\nimport random\r\nfrom bs4 import BeautifulSoup as bs\r\n\r\napi = ['AIzaSyD7YNwN_kB5ctcWBq1jciy4gWfYD3u8VZI','AIzaSyDOlZ2fMZdolnYzeOABayc-rHy1QRfrefk','AIzaSyC2U2jHp1FwoatJMX3nOQibQKPbI8TU7hA','AIzaSyBoNRoaSVtXliufa9zVPd5WfDWBWgdn5fo','AIzaSyC2vEqGGjYDv0-amREAwzMyVA2CtD3oHoo','AIzaSyBTsRYZtTmwZVx5Yibu5c_2glB1IgufyPc']#,''\r\n#[olliviere57@gmail.com,victormonnet772@gmail.com,fhdjsjqkiks4@gmail.com,'oldeluab236@gmail.com',mediumelian@gmail.com,aveelian2@gmail.com] | eliancmoi\r\napi_id = 0\r\n#autre email : \"rjdkjszhhddjdj@gmail.com\"\r\n\r\n\r\n\r\ntwitchliste = {1:['eslcs','english'],2:['gaules','portuguese'],3:['csgo_mc','russian'],4:['fl0m','english'],5:['esl_cs_es','spanish'],6:['japanesekoreanug','japanese'],7:['rtparenacsgo','portuguese'],8:['99damage','german'],9:['zerator','french'],10:['1pvcs','french'],11:['esl_csgo_pl','polish'],12:['csgomc_ua','ukrainian'],13:['lec','english'],14:['otplol_','french'],15:['lvpes','spanish'],16:['iwdominate','english'],17:['summonersinnlive','german'],18:['imls','english'],19:['polsatgames','polish'],20:['pg_esports_lol','italian'],21:['mfreak00','spanish'],22:['riotgamesturkish','turkish'],23:['lpl','english'],24:['caedrel','english'],25:['lck','english'],26:['loltyler1','english,'],27:['lolpacifictw','chinesehk'],28:['halpern','turkish'],29:['cblol','portuguese'],30:['baiano','portuguese'],31:['ibai','spanish'],32:['shaunz','french'],33:['solary','french'],34:['teamheretics','spanish'],35:['forg1','spanish'],36:['kamet0','french'],37:['sneakylol','english'],38:['meteos','english'],39:['yamatocannon','english'],40:['ohnepixel','english'],41:['valorant_jpn','japanese'],42:['valorant_pacific','english'],43:['akarindao','japanese'],44:['vorzu','japanese'],45:['valorant','english'],46:['superbuss_','thai'],47:['valorant_th','thai'],48:['valorant_kr','korean'],49:['papesan','french'],50:['valorant_tw','chinesehk'],51:['thinkingmansvalo','english'],52:['spicyuuu','english'],53:['sliggytv','english'],54:['valorant_id','indonesian'],55:['kiittwy','english'],56:['viperdemon','thai'],57:['inygontv1','portuguese'],58:['gamersloungegr','greek'],59:['esport2tv','hungarian'],60:['nambong94','korean'],61:['valorant_emea','english'],62:['jbzzed','french'],63:['hitboxking','spanish'],64:['valorantleague_tr','turkish'],65:['blackelespanolito','spanish'],66:['sirmaza','spanish'],67:['valorant_fr','french'],68:['saamtwo','turkish'],69:['starwraith','spanish'],70:['valorant_es','spanish'],71:['da1mon','turkish'],72:['lucasrojo','spanish'],73:['pow3r','italian'],74:['ubeka_','turkish'],75:['alfajer','turkish'],75:['stansmith_jp','japanese'],76:['fatiiiih','french'],77:['7ssk7','russian'],78:['roundzzzzz','russian'],79:['damysus','arabic'],80:['mimimimichaela','english'],81:['harmii','german'],82:['benjyfishy','english'],83:['kubafps','german'],84:['sizophren','german'],85:['sergiofferra','spanish'],86:['spygea','japanese'],87:['combatry','turkish'],88:['2xciv','turkish'],89:['rax1337','german'],90:['tolkin','german'],91:['lol_nemesis','english'],92:['kenrhen','italian'],93:['jasper7se','japanese'],94:['fps_shaka','japanese'],95:['valorant_americas','english'],96:['valorant_br','portuguese'],97:['subroza','english'],98:['coreano','portuguese'],99:['gabepeixe','portuguese'],\r\n               100:['shanks_ttv','english'],101:['sinatraa','english'],102:['valorant_la','spanish'],103:['tteuw','portuguese'],104:['schrodingerlee','english'],105:['woohoojin','english'],106:['averagejonas','english'],107:['xarola_','english'],108:['tarik','english'],109:['vela','spanish'],110:['thegrefg','spanish'],111:['loud_coringa','portuguese'],112:['teshrak','english'],113:['yamatocannon','english'],114:['champi14','spanish'],115:['eslcsb','english'],116:['ale_apoka','portuguese'],117:['rootthegamer','portuguese'],118:['esl_dota2','english'],119:['dota2mc','russian'],120:['gorgc','english'],121:['4desports','spanish'],122:['dota2mc_ua','ukrainian'],123:['esb_dota2','spanish'],124:['btsbrasiltv','portuguese'],125:['just_ns','russian'],126:['playapex','russian'],127:['emeamasters','english'],128:['vcsenglish','english'],129:['sideshow','english'],130:['buster','russian'],131:['csgo_paragon','russian'],132:['tenz','english'],133:['im_mittiii','japanese'],134:['nix','russian'],135:['tpabomah','russian'],136:['dreadztv','russian'],137:['froggedtv','french'],138:['lightfurylf','thai'],139:['ade3_3','japanese'],140:['boomburapa','thai'],141:['mother3rd','japapanese'],142:['nickdaboom','spanish'],143:['lynxcerezlol','turkish'],144:['liang_0714','chinesehk'],145:['takayaspecial','japanese'],146:['revolta','portuguese'],147:['jukes','portuguese'],148:['skyyart','french'],149:['bbbb87','chinesekh'],150:['lla','spanish'],151:['alfrea','chinesehk'],152:['yoda','portuguese'],153:['riotgamesjp','japanese'],154:['riotgames','english'],155:['nervarien','polish'],156:['blastpremier','english'],157:['blast','english'],158:['izakooo','polish'],159:['relog_ru','russian'],160:['relog_ru2','russian'],161:['pelaajatcom','finnish'],162:['bystaxx','spanish'],163:['mgg_fr','french'],164:['inkmate0','russian'],165:['trilluxe','german'],166:['watchfultv','english'],167:['krl_stream','french'],168:['csgomc_ua2','ukrainian'],169:['pituherranz','spanish'],170:['bysl4m','russian'],171:['michel','portuguese'],172:['the_real_fer','spanish'],173:['anastaze','russian'],174:['kennys','french'],175:['pago3','polish'],176:['rootthegamer','turkish'],177:['rtparenacsgo2','portuguese'],178:['gunguno','chinesehk'],179:['malek_csgo','french'],180:['nikolarn','english'],181:['wtcn','turkish'],182: ['rubius', 'spanish'], 183: ['forsen', 'english'], 184: ['strogo1337', 'russian'], 185: ['giantwaffle', 'english'], 186: ['teeqo', 'english'], 187: ['carry_game', 'chinesehk'], 188: ['valorant_tur', 'turkish'], 189: ['clutch_fii', 'japanese'], 190: ['flamekr', 'korean'], 191: ['somarcus', 'english'],192:['valorant_ph','philipin'],193:['valorantesports_cn','chinesehk'],194:['ericatlol','portuguese'],195:['lobanjicaa','english'],196:['stewie2k','english'],197:['elisaviihdesport','finish'],198:['psp1g','english'],199:['rocketleague','english'],\r\n               200:['rocketbaguette','french'],201:['rizzo','english'],202:['rosdri_twitch','spanish'],203:['rocketstreetlive','spanish'],204:['retalsrl','english'],205:['rasmelthor','french'],206:['zoomaa','english'],207:['ixkillerx','arabic'],208:['rocketleaguesam','portuguese'],209:['mixwell','spanish'],210:['recrent','russian'],211:['tck10','portuguese'],212:['vodkavdk','japanese'],213:['laplusdarknesss_hololive','japanese'],214:['cr_rion','japanese'],215:['ayatsunoyuni_stellive','korean'],216:['mahluna','english'],217:['crazyfacetw','chinesehk'],218:['paulanobre','spanish'],219:['mwzera','russian'],220:['assentw','chinesehk'],221:['bucher','german'],222:['shahzam','english'],223:['hyoon','english'],224:['supertf','english'],225:['kimdoenmo','korean'],226:['doublelift','english'],227:['sapnaplive','english'],228:['barbakahn','spanish'],229:['neckolol','spanish'],230:['absoluttlol','portuguese'],231:['sabrinoca','portuguese'],232:['broxah','english'],233:['terenas','italian'],234:['naru','turkish'],235:['delordione','polish'],236:['snowar12','arabic'],237:['k4sen','japanese']}\r\nhuyaliste = {1:['660000','chinese'],2:['573076','chinese'],3:['52327','chinese'],4:['123321','chinese'],5:['660001','chinese'],6:['660002','chinese'],7:['25552153','chinese'],8:['211888','chinese'],9:['123888','chinese'],10:['310112','chinese'],11:['660679','chinese'],12:['660137','chinese']}\r\nyoutubeliste = {1:['@LPLOfficial','english'],2:['@SummonerInnDE','german'],3:['@LEC','english'],4:['@Lolespor','turkish'],5:['@ESLCS','english'],6:['@OnGamingVTVcab','vietnamese'],7:['@LCKglobal','english'],8:['@LCKTiengViet','vietnamese'],9:['@CBLOL','portuguese'],10:['@rlesports','english'],11:['@VALORANTjp','japanese'],12:['@VCTPacific','english'],13:['@VALORANTEsportsIndonesia','indonesian'],14:['@VALORANTEsportsTH','thai'],15:['@VCTkr','korean'],16:['@VALORANTChampionsTourVietnam','vietnamese'],17:['@8bitBinks69','english'],18:['@SnaxGaming','english'],19:['@Bomman','vietnamese'],20:['@VALORANTEsportsPH','philipin'],21:['@CSGOVODsMaincast','russian'],22:['@GamersLoungeGr','greek'],23:['@PolsatGames','polish'],24:['@VALORANTEsportsEMEA','english'],25:['@VALORANTChallengersTR','turkish'],26:['@vcslmht','vietnamese'],27:['@hoangluanblv','vietnamese'],28:['@LloydStyle','thai'],29:['@VALORANTEsportsLA','spanish'],30:['@SofMM','vietnamese'],31:['@Optimus96','vietnamese'],32:['@ESLDota2','english'],33:['@WxCIndonesia','indonesian'],34:['@kuyanicwxc','philipin'],35:['@23EsportsTV','vietnamese'],36:['@LoLeSportsJP','japanese'],37:['@hoangluanblv','vietnamese'],38:['@lolpacific','chinesehk'],39:['@LCK','korean'],40:['@lolesports','english'],41:['@lla','spanish'],42:['@BLASTPremier','english'],43:['@500BROSCSGO','vietnamese'],44:['@ValorantEsports','english'],45:['@VALORANTEsportsTW','chinesehk'],46:['@shiranamiramune','japanese'],47:['@bi88sheng','chinesehk'],48:['@LCKCarry','chinesehk'],49:['@Kurohiko','indonesian']}\r\n\r\n#realyoutubeliste = {1:['@LPLOfficial','english'],2:['@SummonerInnDE','german'],3:['@LEC','english'],4:['@Lolespor','turkish'],5:['@ESLCS','english'],6:['@OnGamingVTVcab','vietnamese'],7:['@LCKglobal','english'],8:['@LCKTiengViet','vietnamese'],9:['@CBLOL','portuguese'],10:['@rlesports','english'],11:['@VALORANTjp','japanese'],12:['@VCTPacific','english'],13:['@VALORANTEsportsIndonesia','indonesian'],14:['@VALORANTEsportsTH','thai'],15:['@VCTkr','korean'],16:['@VALORANTChampionsTourVietnam','vietnamese'],17:['@8bitBinks69','english'],18:['@SnaxGaming','english'],19:['@Bomman','vietnamese'],20:['@VALORANTEsportsPH','philipin'],21:['@CSGOVODsMaincast','russian'],22:['@GamersLoungeGr','greek'],23:['@PolsatGames','polish'],24:['@VALORANTEsportsEMEA','english'],25:['@VALORANTChallengersTR','turkish'],26:['@vcslmht','vietnamese'],27:['@valorant_americas','english'],28:['@valorantesportsbr','portuguese'],29:['@VALORANTEsportsLA','spanish'],30:['@SofMM','vietnamese'],31:['@ESBDota2','spanish'],32:['@ESLDota2','english'],33:['@WxCIndonesia','indonesian'],34:['@kuyanicwxc','philipin'],35:['@23EsportsTV','vietnamese'],36:['@LoLeSportsJP','japanese'],37:['@hoangluanblv','vietnamese'],38:['@lolpacific','chinesehk'],39:['@LCK','korean'],40:['@lolesports','english'],41:['@lla','spanish'],42:['@BLASTPremier','english'],43:['@500BROSCSGO','vietnamese'],44:['@ValorantEsports','english'],45:['@VALORANTEsportsTW','chinesehk'],46:['@shiranamiramune','japanese'],47:['@bi88sheng','chinesehk'],48:['@LCKCarry','chinesehk'],49:['@FANKOV01','russian']}\r\n\r\n\r\nalphabet = [chr(i) for i in range(65, 91)]\r\n\r\ndef api_en_cours(liste_api):\r\n    global api_id\r\n    longueur = (len(liste_api)-1)*2+1\r\n    if api_id > longueur:\r\n        api_id = 0\r\n    indice = liste_api[api_id//2]\r\n    api_id += 1\r\n    return indice\r\n\r\n# Créer une liste des combinaisons possibles de une et deux lettres, de 'A' à 'BA'\r\ncombinations = []\r\nfor letter in alphabet:\r\n    combinations.append(letter)\r\nfor i in range(len(alphabet)):\r\n    for j in range(len(alphabet)):\r\n        combinations.append(alphabet[i] + alphabet[j])\r\n\r\nimport datetime\r\nimport time\r\nfrom openpyxl import Workbook\r\nfrom openpyxl.utils import get_column_letter\r\n\r\ndef init():\r\n    for d in range(100):\r\n        print(51)\r\n        verif = 0\r\n        ytbl = youtubeliste \r\n        all_id = id_channel(ytbl)\r\n        date_actuelle = datetime.datetime.now().date()\r\n        date_formattee = date_actuelle.strftime(\"%d%m%Y\")\r\n        filename = date_formattee+'.xlsx'\r\n        LISTEYT = true_yt_liste(ytbl,all_id)\r\n        print(59)\r\n        final_liste = get_full_liste(all_huya_viewers(huyaliste), all_twitch_viewers(twitchliste), all_youtube_viewers(LISTEYT), true_bilibili_liste())\r\n        workbook = Workbook()\r\n        worksheet = workbook.active\r\n        name = []\r\n        languages = []\r\n        print(65)\r\n        for i in range(len(final_liste)):\r\n            getname = final_liste[i][2]\r\n            name.append(getname)\r\n        for i in range(len(final_liste)):\r\n            getlanguage = final_liste[i][1]\r\n            languages.append(getlanguage)\r\n        print(71)\r\n        for i, language in enumerate(languages):\r\n            column_letter = get_column_letter(i+2)\r\n            worksheet[column_letter + '1'] = language\r\n        for i, named in enumerate(name):\r\n            column_letter = get_column_letter(i+2)\r\n            worksheet[column_letter + '2'] = named\r\n        last_time = datetime.datetime.now()\r\n        print(80)\r\n        for j in range(1000000):\r\n            print(82)\r\n            ha = datetime.datetime.now().time()\r\n            if ha >= datetime.time(9,10) and verif==0:\r\n                verif=1\r\n            if ha >= datetime.time(9,00) and ha < datetime.time(9,10) and verif==1:\r\n                verif=0\r\n                break\r\n            print(89)\r\n            try: \r\n                if j != 0 and j%40 == 0:\r\n                    LISTEYT = true_yt_liste(ytbl,all_id)\r\n                print(datetime.datetime.now(),j)\r\n                combined = []\r\n                print(95)\r\n                hy = all_huya_viewers(huyaliste)\r\n                print(97)\r\n                tw = all_twitch_viewers(twitchliste)\r\n                print(99)\r\n                yt = all_youtube_viewers(LISTEYT)\r\n                print(101)\r\n                bi = true_bilibili_liste()\r\n                print(103)\r\n                print(yt)\r\n                for i in range(len(hy)):\r\n                    combined.append(hy[i+1])\r\n                for k in range(len(tw)):\r\n                    combined.append(tw[k+1])\r\n                for z in range(len(yt)):\r\n                    combined.append(yt[z+1])\r\n                for x in range(len(bi)):\r\n                    combined.append(bi[x+1])\r\n                print(109)\r\n                now = datetime.datetime.now()\r\n                diff = now - last_time\r\n                while diff.total_seconds() < 150:#150:\r\n                    time.sleep(0.1)\r\n                    now = datetime.datetime.now()\r\n                    diff = now - last_time\r\n                print(116)\r\n\r\n                last_time = datetime.datetime.now()\r\n                worksheet['A' + str(j+3)] = last_time.strftime(\"%Y-%m-%d %H:%M:%S\")\r\n                print(120)\r\n                for s in range(len(combined)):\r\n                    worksheet[combinations[s+1] + str(j+3)] = combined[s][0]\r\n                workbook.save(filename)\r\n            except:\r\n                print(125)\r\n                time.sleep(30)\r\n                \r\n        \r\ndef huya(room_id: str) -> map:\r\n    lUserCount = 0 \r\n    liveStatus = \"OFF\"\r\n    try:\r\n        if not room_id.isdigit():\r\n            try:\r\n                headers = {\r\n                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'}\r\n                htmlDoc = requests.get(\r\n                    f'https://m.huya.com/{room_id}', headers=headers)\r\n                soup = BeautifulSoup(htmlDoc.text, 'html.parser')\r\n                a = soup.body.contents[8]\r\n                b = str(a).replace('<script> window.HNF_GLOBAL_INIT = ', '')\r\n                c = str(b).replace('</script>', '')\r\n                jsonContent = json.loads(c)\r\n                room_id = str(jsonContent['roomInfo']\r\n                              ['tProfileInfo']['lProfileRoom'])\r\n            except:\r\n                pass\r\n        api_url = 'https://mp.huya.com/cache.php?m=Live&do=profileRoom&roomid='\r\n        headers = {\r\n            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'}\r\n        html = requests.get(api_url + room_id, headers=headers)\r\n        data = json.loads(html.text)['data']\r\n        data2 = html.json()\r\n\r\n        nick = data['profileInfo']['nick']\r\n        room_name = data['liveData']['introduction']\r\n        liveStatus = data['liveStatus']\r\n        avatar = data['profileInfo']['avatar180']\r\n        lUserCount = data[\"liveData\"][\"userCount\"]\r\n        live_info = data[\"data\"][0]\r\n        vip_count = live_info[\"vipCount\"]\r\n\r\n    except:\r\n        pass\r\n    if liveStatus == \"OFF\" or liveStatus == \"REPLAY\":\r\n        return 0\r\n    else:\r\n        bnb = 0\r\n\r\n    return lUserCount\r\n\r\ndef all_huya_viewers(di):\r\n    lhuyaviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_huya = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(huya(id_huya))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        chaine_analyser.append(id_huya)\r\n        lhuyaviewer[i+1] = chaine_analyser\r\n    return lhuyaviewer\r\n    \r\ndef twitch(channel_name):\r\n    client_id = 'iwosq4fb8p0kkvj3d5gdtp8bcyh3v7'\r\n    access_token = '9yk3hej9w6qwqdn1jjayqg7zielfk1'\r\n    url = f'https://api.twitch.tv/helix/streams?user_login={channel_name}'\r\n    headers = {'Client-ID': client_id,\r\n               'Authorization': f'Bearer {access_token}'}\r\n\r\n    response = requests.get(url, headers=headers)\r\n    data = response.json()['data']\r\n    if len(data) == 0:\r\n        return 0\r\n    else:\r\n        viewers = data[0]['viewer_count']\r\n        return viewers\r\n    \r\ndef id_stream(channel_username,idapi):\r\n    youtube = idapi\r\n    try:\r\n        # Obtenir l'ID du flux en direct de la chaîne\r\n        live_stream_response = youtube.search().list(part='id', channelId=channel_username, type='video', eventType='live', maxResults=1).execute()\r\n        live_stream_id = live_stream_response['items'][0]['id']['videoId']\r\n        \r\n        return live_stream_id \r\n    except IndexError:\r\n        return None\r\n\r\nif __name__ == \"__main__\":\r\n    print(twitch(\"blastpremier\"))\r\n\r\n        \r\ndef id_channel(liste_channel):\r\n    DEVELOPER_KEY = 'AIzaSyBTsRYZtTmwZVx5Yibu5c_2glB1IgufyPc'\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    print(youtube)\r\n    search_response = youtube.search().list(q=liste_channelk, type='channel', part='id').execute()\r\n    channel_id = search_response['items'][0]['id']['channelId']\r\n\r\n    return channel_id\r\n        \r\n\r\ndef true_yt_liste(ytliste,liste_id):\r\n    DEVELOPER_KEY = api_en_cours(api)\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    yt = ytliste\r\n    new_yt_liste = {}\r\n    for i in range(len(yt)):\r\n        switchid = yt[i+1][0]\r\n        currentname = yt[i+1][0]\r\n        language = yt[i+1][1]\r\n        switchid = id_stream(liste_id[i],youtube)\r\n        new_yt_liste[i+1] = []\r\n        new_yt_liste[i+1].append(switchid)\r\n        new_yt_liste[i+1].append(language)\r\n        new_yt_liste[i+1].append(currentname)\r\n    return new_yt_liste\r\n\r\ndef viewer_youtube(id_s):\r\n    if id_s == None:\r\n        return 0\r\n    DEVELOPER_KEY = 'AIzaSyAnfXC89u0jFwXKz9aojJwreYY-i1z7zzg'#elian.ollivier@gmail.com\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    try:\r\n        request = youtube.videos().list(\r\n            part='liveStreamingDetails',\r\n            id=id_s\r\n        )\r\n        response = request.execute()\r\n        viewers = int(response['items'][0]['liveStreamingDetails']['concurrentViewers'])\r\n    except HttpError:\r\n        viewers = 0\r\n    except KeyError:\r\n        viewers = 0\r\n    except IndexError:\r\n        viewers = 0\r\n    except Exception as e:\r\n        viewers = 0\r\n    return viewers\r\n\r\n\r\n\r\n\r\ndef all_youtube_viewers(di):\r\n    lyoutubeviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_youtube = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(viewer_youtube(id_youtube))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        chaine_analyser.append(di[i+1][2])\r\n        lyoutubeviewer[i+1] = chaine_analyser\r\n    return lyoutubeviewer\r\n\r\n\r\ndef all_twitch_viewers(di):\r\n    ltwitchviewer = {}\r\n    for i in range(len(di)):\r\n        try:\r\n            chaine_analyser = []\r\n            id_twitch = di[i+1][0]\r\n            language = di[i+1][1]\r\n            viewers = str(twitch(id_twitch))\r\n            chaine_analyser.append(viewers)\r\n            chaine_analyser.append(language)\r\n            chaine_analyser.append(id_twitch)\r\n            ltwitchviewer[i+1] = chaine_analyser\r\n        except:\r\n            print(di[i+1][0])\r\n            ltwitchviewer[i+1] = [0,'error','error']            \r\n    return ltwitchviewer\r\n\r\n\r\ndef get_full_liste(hy,yt,tw,bi):\r\n    combined = []\r\n    for i in range(len(hy)):\r\n        combined.append(hy[i+1])\r\n    for j in range(len(yt)):\r\n        combined.append(yt[j+1])        \r\n    for k in range(len(tw)):\r\n        combined.append(tw[k+1])\r\n    for l in range(len(bi)):\r\n        combined.append(bi[l+1])    \r\n    return combined\r\n\r\n\r\n\r\ndef convert_number(num):\r\n    if isinstance(num, str):\r\n        # Si l'argument est une chaîne de caractères, on le traite\r\n        parts = num.split(' ')\r\n        if len(parts) == 2:\r\n            if parts[1] == '万':\r\n                return int(float(parts[0]) * 10000)\r\n            if parts[1] == '亿':\r\n                return int(float(parts[0]) * 100000000)\r\n        elif len(parts) == 1:\r\n            return int(0)\r\n        \r\ndef all_bilibili_viewers():\r\n    dictionnaire = {}\r\n    url = \"https://live.bilibili.com/p/eden/area-tags?parentAreaId=13&areaId=561\"\r\n    response = requests.get(url)\r\n    html = response.content\r\n    soup = bs(html, 'html.parser')\r\n    content = soup.find('div', {'class': 'index_1Jokt5rg'})\r\n    tkt_list = content.find_all('div', {'class': 'Item_29AwQRu5'})\r\n    ind = 0\r\n    for tkt in tkt_list:\r\n        nom = tkt.find('div', {'class': 'Item_QAOnosoB'}).text.strip()\r\n        span = tkt.find('span')\r\n        if span:\r\n            span_text = span.text\r\n        audience = convert_number(span_text)\r\n        ind = ind+1\r\n        if nom == '哔哩哔哩王者荣耀赛事':\r\n            nom = 'KPL_bilibili'\r\n        if nom == '哔哩哔哩刀塔2赛事':\r\n            nom = 'Dota_bilibili'\r\n        if nom == '哔哩哔哩英雄联盟赛事':\r\n            nom = 'LOL_bilibili'\r\n        if nom == 'CSGO官方赛事':\r\n            nom = 'CSGO_bilibili'\r\n        if nom == 'CSGO赛事副舞台':\r\n            nom = 'CSGO2_bilibili'\r\n        if nom == '哔哩哔哩LOL赛事直播':\r\n            nom = 'LOL2_bilibili'\r\n        if nom == '无畏契约赛事':\r\n            nom = 'VALO_Bilibili'            \r\n        dictionnaire[ind] = [audience,'chinese',nom]\r\n    return dictionnaire\r\n\r\ndef true_bilibili_liste():\r\n    all_channel = {1: [0,'chinese','KPL_bilibili'],2: [0,'chinese','Dota_bilibili'],3: [0,'chinese','LOL_bilibili'],4: [0,'chinese','CSGO_bilibili'],5: [0,'chinese','CSGO2_bilibili'],6: [0,'chinese','VALO_Bilibili'],7: [0,'chinese','LOL2_bilibili']}\r\n    old_liste = all_bilibili_viewers()\r\n    for i in range(len(old_liste)):\r\n        for j in range(len(all_channel)):        \r\n            if old_liste[i+1][2] == all_channel[j+1][2]:\r\n                all_channel[j+1][0] = old_liste[i+1][0]\r\n    return all_channel\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        ",
    "include": false,
    "lastModified": {
      "secs_since_epoch": 1744917709,
      "nanos_since_epoch": 854321600
    }
  },
  {
    "kind": "File",
    "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\telegram_interface.py",
    "content": "import tkinter as tk\r\nfrom tkinter import ttk\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport threading\r\nimport asyncio\r\nimport datetime\r\nimport time\r\nfrom telethon import TelegramClient\r\nfrom telethon.tl.functions.channels import GetFullChannelRequest\r\nfrom telethon.tl.functions.phone import GetGroupCallRequest\r\nimport matplotlib.dates as mdates\r\nimport mplcursors  # Importer mplcursors pour l'interactivité\r\n\r\n# Remplacez ces valeurs par vos propres identifiants\r\napi_id = '15370596'\r\napi_hash = '36ca62e65c3fbf8c8cb6d397cfc3f3ea'\r\nphone_number = '+33635933310'\r\n\r\n# Initialisation du client Telegram\r\nclient = TelegramClient('session', api_id, api_hash)\r\n\r\n# Dictionnaire pour stocker les données de chaque stream\r\nstreams_data = {}\r\n\r\n# Fonction pour ajouter un stream à suivre\r\ndef add_stream():\r\n    channel_name = stream_entry.get()\r\n    if channel_name and channel_name not in streams_data:\r\n        streams_data[channel_name] = {'Time': [], 'Viewers': []}\r\n        update_listbox()\r\n        stream_entry.delete(0, tk.END)\r\n\r\n# Fonction pour mettre à jour les éléments de la Listbox\r\ndef update_listbox():\r\n    stream_combobox.delete(0, tk.END)  # Effacer la liste actuelle\r\n    for stream in streams_data.keys():\r\n        stream_combobox.insert(tk.END, stream)  # Ajouter chaque stream à la Listbox\r\n\r\n# Fonction pour tracer le graphique en additionnant les viewers des streams sélectionnés\r\ndef plot_viewers():\r\n    selected_streams = stream_combobox.curselection()\r\n    if selected_streams:\r\n        ax.clear()  # Efface le graphique précédent\r\n\r\n        # Dictionnaire pour stocker les données de chaque stream sous forme de {time: viewers}\r\n        stream_data_dicts = {}\r\n        all_times = set()\r\n\r\n        for index in selected_streams:\r\n            stream_name = stream_combobox.get(index)\r\n            stream_data = streams_data[stream_name]\r\n\r\n            if stream_data['Time'] and stream_data['Viewers']:\r\n                # Créer un dictionnaire {time: viewers} pour ce stream\r\n                time_viewers = dict(zip(stream_data['Time'], stream_data['Viewers']))\r\n                stream_data_dicts[stream_name] = time_viewers\r\n                all_times.update(stream_data['Time'])\r\n\r\n        if not all_times:\r\n            return  # Rien à tracer si aucune donnée\r\n\r\n        # Créer une liste triée de tous les temps à intervalles d'une minute\r\n        min_time = min(all_times)\r\n        max_time = max(all_times)\r\n        total_minutes = int((max_time - min_time).total_seconds() // 60) + 1\r\n        times = [min_time + datetime.timedelta(minutes=i) for i in range(total_minutes)]\r\n\r\n        # Pour chaque point temporel, sommer les viewers\r\n        total_viewers_list = []\r\n        for time_point in times:\r\n            total_viewers = 0\r\n            for stream_name in stream_data_dicts:\r\n                time_viewers = stream_data_dicts[stream_name]\r\n                if time_point in time_viewers:\r\n                    total_viewers += time_viewers[time_point]\r\n                else:\r\n                    total_viewers += 0\r\n            total_viewers_list.append(total_viewers)\r\n\r\n        # Tracer les données avec un design amélioré\r\n        ax.plot(times, total_viewers_list, marker='o', linestyle='-', color='#1f77b4')\r\n\r\n        ax.set_title(\"Somme des viewers des streams sélectionnés\", fontsize=16)\r\n        ax.set_xlabel('Temps', fontsize=14)\r\n        ax.set_ylabel('Viewers', fontsize=14)\r\n        ax.grid(True, which='both', linestyle='--', linewidth=0.5)\r\n\r\n        # Configurer le format de l'axe des x pour afficher les heures et minutes\r\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\r\n        figure.autofmt_xdate()\r\n\r\n        # Ajouter l'interactivité avec mplcursors\r\n        cursor = mplcursors.cursor(ax, hover=True)\r\n        @cursor.connect(\"add\")\r\n        def on_add(sel):\r\n            x, y = sel.target\r\n            sel.annotation.set(text=f\"Temps: {mdates.num2date(x).strftime('%H:%M')}\\nViewers: {int(y)}\")\r\n            sel.annotation.get_bbox_patch().set(fc=\"white\")\r\n\r\n        canvas.draw()\r\n\r\n# Fonction asynchrone pour obtenir le nombre de viewers en direct\r\nasync def get_live_audience(name_telegram_channel):\r\n    try:\r\n        await client.start(phone=phone_number)\r\n        channel = await client.get_entity(name_telegram_channel)\r\n        full_channel = await client(GetFullChannelRequest(channel=channel))\r\n\r\n        if full_channel.full_chat.call:\r\n            group_call = await client(GetGroupCallRequest(call=full_channel.full_chat.call, limit=1))\r\n            return group_call.call.participants_count\r\n        return 0  # Retourne 0 si le stream n'est pas en direct\r\n    except Exception as e:\r\n        print(f\"Erreur lors de la récupération du nombre de viewers pour {name_telegram_channel}: {e}\")\r\n        return 0  # Retourne 0 en cas d'erreur\r\n    finally:\r\n        await client.disconnect()\r\n\r\n# Fonction pour mettre à jour les viewers dans un thread séparé\r\ndef update_viewers(loop):\r\n    asyncio.set_event_loop(loop)\r\n    while True:\r\n        now = datetime.datetime.now()\r\n        # Calculer le temps jusqu'à la prochaine minute exacte\r\n        next_minute = (now + datetime.timedelta(minutes=1)).replace(second=0, microsecond=0)\r\n        sleep_time = (next_minute - now).total_seconds()\r\n        time.sleep(sleep_time)\r\n\r\n        current_time = datetime.datetime.now().replace(second=0, microsecond=0)\r\n        stream_names = list(streams_data.keys())\r\n        for stream_name in stream_names:\r\n            viewers = loop.run_until_complete(get_live_audience(stream_name))\r\n            streams_data[stream_name]['Time'].append(current_time)\r\n            streams_data[stream_name]['Viewers'].append(viewers)\r\n        # Mettre à jour le graphique après chaque collecte de données\r\n        plot_viewers()\r\n\r\n# Mettre à jour le graphique lorsque la sélection dans la Listbox change\r\ndef on_stream_select(event):\r\n    plot_viewers()\r\n\r\n# Démarrer un thread pour la récupération des viewers\r\ndef start_viewer_thread():\r\n    loop = asyncio.new_event_loop()\r\n    threading.Thread(target=update_viewers, args=(loop,), daemon=True).start()\r\n\r\n# Création de la fenêtre principale avec un design amélioré\r\nroot = tk.Tk()\r\nroot.title(\"Suivi des Viewers des Streams Telegram\")\r\nroot.geometry(\"1000x700\")\r\nroot.configure(bg='#f0f0f0')\r\n\r\n# Section pour ajouter un nouveau stream\r\nadd_stream_frame = tk.Frame(root, bg='#f0f0f0')\r\nadd_stream_frame.pack(pady=10)\r\n\r\nstream_entry_label = ttk.Label(add_stream_frame, text=\"Ajouter un stream (nom du canal) :\", background='#f0f0f0')\r\nstream_entry_label.pack(side=tk.LEFT)\r\n\r\nstream_entry = ttk.Entry(add_stream_frame)\r\nstream_entry.pack(side=tk.LEFT, padx=5)\r\n\r\nadd_stream_button = ttk.Button(add_stream_frame, text=\"Ajouter\", command=add_stream)\r\nadd_stream_button.pack(side=tk.LEFT, padx=10)\r\n\r\n# Listbox pour sélectionner plusieurs streams\r\nstream_label = ttk.Label(root, text=\"Choisissez un ou plusieurs streams :\", background='#f0f0f0')\r\nstream_label.pack(pady=10)\r\n\r\nstream_combobox = tk.Listbox(root, selectmode=tk.MULTIPLE, height=5)\r\nstream_combobox.pack(pady=10)\r\nstream_combobox.bind(\"<<ListboxSelect>>\", on_stream_select)\r\n\r\n# Création de la figure pour le graphique avec un style amélioré\r\nplt.style.use('ggplot')  # Remplacé par un style intégré\r\nfigure = plt.Figure(figsize=(12, 6), dpi=100)\r\nax = figure.add_subplot(111)\r\n\r\n# Canvas pour afficher le graphique\r\ncanvas = FigureCanvasTkAgg(figure, master=root)\r\ncanvas.get_tk_widget().pack()\r\n\r\n# Démarrer le thread pour la mise à jour des viewers\r\nstart_viewer_thread()\r\n\r\n# Lancer la boucle principale de l'application\r\nroot.mainloop()\r\n",
    "include": false,
    "lastModified": {
      "secs_since_epoch": 1726328335,
      "nanos_since_epoch": 93223400
    }
  },
  {
    "kind": "Directory",
    "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste",
    "expanded": true,
    "include": false,
    "children": [
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\00API.py",
        "content": "from openpyxl import Workbook\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime\r\nimport time\r\nimport json\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom googleapiclient.discovery import build\r\nfrom googleapiclient.errors import HttpError\r\nimport random\r\nfrom bs4 import BeautifulSoup as bs\r\n\r\napi = ['AIzaSyD7YNwN_kB5ctcWBq1jciy4gWfYD3u8VZI','AIzaSyDOlZ2fMZdolnYzeOABayc-rHy1QRfrefk','AIzaSyC2U2jHp1FwoatJMX3nOQibQKPbI8TU7hA','AIzaSyBoNRoaSVtXliufa9zVPd5WfDWBWgdn5fo','AIzaSyC2vEqGGjYDv0-amREAwzMyVA2CtD3oHoo','AIzaSyBTsRYZtTmwZVx5Yibu5c_2glB1IgufyPc']#,''\r\n#[olliviere57@gmail.com,victormonnet772@gmail.com,fhdjsjqkiks4@gmail.com,'oldeluab236@gmail.com',mediumelian@gmail.com,aveelian2@gmail.com] | eliancmoi\r\napi_id = 0\r\n#autre email : \"rjdkjszhhddjdj@gmail.com\"\r\n\r\n\r\n\r\ntwitchliste = {1:['eslcs','english'],2:['gaules','portuguese'],3:['csgo_mc','russian'],4:['fl0m','english'],5:['esl_cs_es','spanish'],6:['japanesekoreanug','japanese'],7:['rtparenacsgo','portuguese'],8:['99damage','german'],9:['zerator','french'],10:['1pvcs','french'],11:['esl_csgo_pl','polish'],12:['csgomc_ua','ukrainian'],13:['lec','english'],14:['otplol_','french'],15:['lvpes','spanish'],16:['iwdominate','english'],17:['summonersinnlive','german'],18:['imls','english'],19:['polsatgames','polish'],20:['pg_esports_lol','italian'],21:['mfreak00','spanish'],22:['riotgamesturkish','turkish'],23:['lpl','english'],24:['caedrel','english'],25:['lck','english'],26:['loltyler1','english,'],27:['lolpacifictw','chinesehk'],28:['halpern','turkish'],29:['cblol','portuguese'],30:['baiano','portuguese'],31:['ibai','spanish'],32:['shaunz','french'],33:['solary','french'],34:['teamheretics','spanish'],35:['forg1','spanish'],36:['kamet0','french'],37:['sneakylol','english'],38:['meteos','english'],39:['yamatocannon','english'],40:['ohnepixel','english'],41:['valorant_jpn','japanese'],42:['valorant_pacific','english'],43:['akarindao','japanese'],44:['vorzu','japanese'],45:['valorant','english'],46:['superbuss_','thai'],47:['valorant_th','thai'],48:['valorant_kr','korean'],49:['papesan','french'],50:['valorant_tw','chinesehk'],51:['thinkingmansvalo','english'],52:['spicyuuu','english'],53:['sliggytv','english'],54:['valorant_id','indonesian'],55:['kiittwy','english'],56:['viperdemon','thai'],57:['inygontv1','portuguese'],58:['gamersloungegr','greek'],59:['esport2tv','hungarian'],60:['nambong94','korean'],61:['valorant_emea','english'],62:['jbzzed','french'],63:['hitboxking','spanish'],64:['valorantleague_tr','turkish'],65:['blackelespanolito','spanish'],66:['sirmaza','spanish'],67:['valorant_fr','french'],68:['saamtwo','turkish'],69:['starwraith','spanish'],70:['valorant_es','spanish'],71:['da1mon','turkish'],72:['lucasrojo','spanish'],73:['pow3r','italian'],74:['ubeka_','turkish'],75:['alfajer','turkish'],75:['stansmith_jp','japanese'],76:['fatiiiih','french'],77:['7ssk7','russian'],78:['roundzzzzz','russian'],79:['damysus','arabic'],80:['mimimimichaela','english'],81:['harmii','german'],82:['benjyfishy','english'],83:['kubafps','german'],84:['sizophren','german'],85:['sergiofferra','spanish'],86:['spygea','japanese'],87:['combatry','turkish'],88:['2xciv','turkish'],89:['rax1337','german'],90:['tolkin','german'],91:['lol_nemesis','english'],92:['kenrhen','italian'],93:['jasper7se','japanese'],94:['fps_shaka','japanese'],95:['valorant_americas','english'],96:['valorant_br','portuguese'],97:['subroza','english'],98:['coreano','portuguese'],99:['gabepeixe','portuguese'],\r\n               100:['shanks_ttv','english'],101:['sinatraa','english'],102:['valorant_la','spanish'],103:['tteuw','portuguese'],104:['schrodingerlee','english'],105:['woohoojin','english'],106:['averagejonas','english'],107:['xarola_','english'],108:['tarik','english'],109:['vela','spanish'],110:['thegrefg','spanish'],111:['loud_coringa','portuguese'],112:['teshrak','english'],113:['yamatocannon','english'],114:['champi14','spanish'],115:['eslcsb','english'],116:['ale_apoka','portuguese'],117:['rootthegamer','portuguese'],118:['esl_dota2','english'],119:['dota2mc','russian'],120:['gorgc','english'],121:['4desports','spanish'],122:['dota2mc_ua','ukrainian'],123:['esb_dota2','spanish'],124:['btsbrasiltv','portuguese'],125:['just_ns','russian'],126:['playapex','russian'],127:['emeamasters','english'],128:['vcsenglish','english'],129:['sideshow','english'],130:['buster','russian'],131:['csgo_paragon','russian'],132:['tenz','english'],133:['im_mittiii','japanese'],134:['nix','russian'],135:['tpabomah','russian'],136:['dreadztv','russian'],137:['froggedtv','french'],138:['lightfurylf','thai'],139:['ade3_3','japanese'],140:['boomburapa','thai'],141:['mother3rd','japapanese'],142:['nickdaboom','spanish'],143:['lynxcerezlol','turkish'],144:['liang_0714','chinesehk'],145:['takayaspecial','japanese'],146:['revolta','portuguese'],147:['jukes','portuguese'],148:['skyyart','french'],149:['bbbb87','chinesekh'],150:['lla','spanish'],151:['alfrea','chinesehk'],152:['yoda','portuguese'],153:['riotgamesjp','japanese'],154:['riotgames','english'],155:['nervarien','polish'],156:['blastpremier','english'],157:['blast','english'],158:['izakooo','polish'],159:['relog_ru','russian'],160:['relog_ru2','russian'],161:['pelaajatcom','finnish'],162:['bystaxx','spanish'],163:['mgg_fr','french'],164:['inkmate0','russian'],165:['trilluxe','german'],166:['watchfultv','english'],167:['krl_stream','french'],168:['csgomc_ua2','ukrainian'],169:['pituherranz','spanish'],170:['bysl4m','russian'],171:['michel','portuguese'],172:['the_real_fer','spanish'],173:['anastaze','russian'],174:['kennys','french'],175:['pago3','polish'],176:['rootthegamer','turkish'],177:['rtparenacsgo2','portuguese'],178:['gunguno','chinesehk'],179:['malek_csgo','french'],180:['nikolarn','english'],181:['wtcn','turkish'],182: ['rubius', 'spanish'], 183: ['forsen', 'english'], 184: ['strogo1337', 'russian'], 185: ['giantwaffle', 'english'], 186: ['teeqo', 'english'], 187: ['carry_game', 'chinesehk'], 188: ['valorant_tur', 'turkish'], 189: ['clutch_fii', 'japanese'], 190: ['flamekr', 'korean'], 191: ['somarcus', 'english'],192:['valorant_ph','philipin'],193:['valorantesports_cn','chinesehk'],194:['ericatlol','portuguese'],195:['lobanjicaa','english'],196:['stewie2k','english'],197:['elisaviihdesport','finish'],198:['psp1g','english'],199:['rocketleague','english'],\r\n               200:['rocketbaguette','french'],201:['rizzo','english'],202:['rosdri_twitch','spanish'],203:['rocketstreetlive','spanish'],204:['retalsrl','english'],205:['rasmelthor','french'],206:['zoomaa','english'],207:['ixkillerx','arabic'],208:['rocketleaguesam','portuguese'],209:['mixwell','spanish'],210:['recrent','russian'],211:['tck10','portuguese'],212:['vodkavdk','japanese'],213:['laplusdarknesss_hololive','japanese'],214:['cr_rion','japanese'],215:['ayatsunoyuni_stellive','korean'],216:['mahluna','english'],217:['crazyfacetw','chinesehk'],218:['paulanobre','spanish'],219:['mwzera','russian'],220:['assentw','chinesehk'],221:['bucher','german'],222:['shahzam','english'],223:['hyoon','english'],224:['supertf','english'],225:['kimdoenmo','korean'],226:['doublelift','english'],227:['sapnaplive','english'],228:['barbakahn','spanish'],229:['neckolol','spanish'],230:['absoluttlol','portuguese'],231:['sabrinoca','portuguese'],232:['broxah','english'],233:['terenas','italian'],234:['naru','turkish'],235:['delordione','polish'],236:['snowar12','arabic'],237:['k4sen','japanese']}\r\nhuyaliste = {1:['660000','chinese'],2:['573076','chinese'],3:['52327','chinese'],4:['123321','chinese'],5:['660001','chinese'],6:['660002','chinese'],7:['25552153','chinese'],8:['211888','chinese'],9:['123888','chinese'],10:['310112','chinese'],11:['660679','chinese'],12:['660137','chinese']}\r\nyoutubeliste = {1:['@LPLOfficial','english'],2:['@SummonerInnDE','german'],3:['@LEC','english'],4:['@Lolespor','turkish'],5:['@ESLCS','english'],6:['@OnGamingVTVcab','vietnamese'],7:['@LCKglobal','english'],8:['@LCKTiengViet','vietnamese'],9:['@CBLOL','portuguese'],10:['@rlesports','english'],11:['@VALORANTjp','japanese'],12:['@VCTPacific','english'],13:['@VALORANTEsportsIndonesia','indonesian'],14:['@VALORANTEsportsTH','thai'],15:['@VCTkr','korean'],16:['@VALORANTChampionsTourVietnam','vietnamese'],17:['@8bitBinks69','english'],18:['@SnaxGaming','english'],19:['@Bomman','vietnamese'],20:['@VALORANTEsportsPH','philipin'],21:['@CSGOVODsMaincast','russian'],22:['@GamersLoungeGr','greek'],23:['@PolsatGames','polish'],24:['@VALORANTEsportsEMEA','english'],25:['@VALORANTChallengersTR','turkish'],26:['@vcslmht','vietnamese'],27:['@hoangluanblv','vietnamese'],28:['@LloydStyle','thai'],29:['@VALORANTEsportsLA','spanish'],30:['@SofMM','vietnamese'],31:['@Optimus96','vietnamese'],32:['@ESLDota2','english'],33:['@WxCIndonesia','indonesian'],34:['@kuyanicwxc','philipin'],35:['@23EsportsTV','vietnamese'],36:['@LoLeSportsJP','japanese'],37:['@hoangluanblv','vietnamese'],38:['@lolpacific','chinesehk'],39:['@LCK','korean'],40:['@lolesports','english'],41:['@lla','spanish'],42:['@BLASTPremier','english'],43:['@500BROSCSGO','vietnamese'],44:['@ValorantEsports','english'],45:['@VALORANTEsportsTW','chinesehk'],46:['@shiranamiramune','japanese'],47:['@bi88sheng','chinesehk'],48:['@LCKCarry','chinesehk'],49:['@Kurohiko','indonesian']}\r\n\r\n#realyoutubeliste = {1:['@LPLOfficial','english'],2:['@SummonerInnDE','german'],3:['@LEC','english'],4:['@Lolespor','turkish'],5:['@ESLCS','english'],6:['@OnGamingVTVcab','vietnamese'],7:['@LCKglobal','english'],8:['@LCKTiengViet','vietnamese'],9:['@CBLOL','portuguese'],10:['@rlesports','english'],11:['@VALORANTjp','japanese'],12:['@VCTPacific','english'],13:['@VALORANTEsportsIndonesia','indonesian'],14:['@VALORANTEsportsTH','thai'],15:['@VCTkr','korean'],16:['@VALORANTChampionsTourVietnam','vietnamese'],17:['@8bitBinks69','english'],18:['@SnaxGaming','english'],19:['@Bomman','vietnamese'],20:['@VALORANTEsportsPH','philipin'],21:['@CSGOVODsMaincast','russian'],22:['@GamersLoungeGr','greek'],23:['@PolsatGames','polish'],24:['@VALORANTEsportsEMEA','english'],25:['@VALORANTChallengersTR','turkish'],26:['@vcslmht','vietnamese'],27:['@valorant_americas','english'],28:['@valorantesportsbr','portuguese'],29:['@VALORANTEsportsLA','spanish'],30:['@SofMM','vietnamese'],31:['@ESBDota2','spanish'],32:['@ESLDota2','english'],33:['@WxCIndonesia','indonesian'],34:['@kuyanicwxc','philipin'],35:['@23EsportsTV','vietnamese'],36:['@LoLeSportsJP','japanese'],37:['@hoangluanblv','vietnamese'],38:['@lolpacific','chinesehk'],39:['@LCK','korean'],40:['@lolesports','english'],41:['@lla','spanish'],42:['@BLASTPremier','english'],43:['@500BROSCSGO','vietnamese'],44:['@ValorantEsports','english'],45:['@VALORANTEsportsTW','chinesehk'],46:['@shiranamiramune','japanese'],47:['@bi88sheng','chinesehk'],48:['@LCKCarry','chinesehk'],49:['@FANKOV01','russian']}\r\n\r\n\r\nalphabet = [chr(i) for i in range(65, 91)]\r\n\r\ndef api_en_cours(liste_api):\r\n    global api_id\r\n    longueur = (len(liste_api)-1)*2+1\r\n    if api_id > longueur:\r\n        api_id = 0\r\n    indice = liste_api[api_id//2]\r\n    api_id += 1\r\n    return indice\r\n\r\n# Créer une liste des combinaisons possibles de une et deux lettres, de 'A' à 'BA'\r\ncombinations = []\r\nfor letter in alphabet:\r\n    combinations.append(letter)\r\nfor i in range(len(alphabet)):\r\n    for j in range(len(alphabet)):\r\n        combinations.append(alphabet[i] + alphabet[j])\r\n\r\nimport datetime\r\nimport time\r\nfrom openpyxl import Workbook\r\nfrom openpyxl.utils import get_column_letter\r\n\r\ndef init():\r\n    for d in range(100):\r\n        print(51)\r\n        verif = 0\r\n        ytbl = youtubeliste \r\n        all_id = id_channel(ytbl)\r\n        date_actuelle = datetime.datetime.now().date()\r\n        date_formattee = date_actuelle.strftime(\"%d%m%Y\")\r\n        filename = date_formattee+'.xlsx'\r\n        LISTEYT = true_yt_liste(ytbl,all_id)\r\n        print(59)\r\n        final_liste = get_full_liste(all_huya_viewers(huyaliste), all_twitch_viewers(twitchliste), all_youtube_viewers(LISTEYT), true_bilibili_liste())\r\n        workbook = Workbook()\r\n        worksheet = workbook.active\r\n        name = []\r\n        languages = []\r\n        print(65)\r\n        for i in range(len(final_liste)):\r\n            getname = final_liste[i][2]\r\n            name.append(getname)\r\n        for i in range(len(final_liste)):\r\n            getlanguage = final_liste[i][1]\r\n            languages.append(getlanguage)\r\n        print(71)\r\n        for i, language in enumerate(languages):\r\n            column_letter = get_column_letter(i+2)\r\n            worksheet[column_letter + '1'] = language\r\n        for i, named in enumerate(name):\r\n            column_letter = get_column_letter(i+2)\r\n            worksheet[column_letter + '2'] = named\r\n        last_time = datetime.datetime.now()\r\n        print(80)\r\n        for j in range(1000000):\r\n            print(82)\r\n            ha = datetime.datetime.now().time()\r\n            if ha >= datetime.time(9,10) and verif==0:\r\n                verif=1\r\n            if ha >= datetime.time(9,00) and ha < datetime.time(9,10) and verif==1:\r\n                verif=0\r\n                break\r\n            print(89)\r\n            try: \r\n                if j != 0 and j%40 == 0:\r\n                    LISTEYT = true_yt_liste(ytbl,all_id)\r\n                print(datetime.datetime.now(),j)\r\n                combined = []\r\n                print(95)\r\n                hy = all_huya_viewers(huyaliste)\r\n                print(97)\r\n                tw = all_twitch_viewers(twitchliste)\r\n                print(99)\r\n                yt = all_youtube_viewers(LISTEYT)\r\n                print(101)\r\n                bi = true_bilibili_liste()\r\n                print(103)\r\n                print(yt)\r\n                for i in range(len(hy)):\r\n                    combined.append(hy[i+1])\r\n                for k in range(len(tw)):\r\n                    combined.append(tw[k+1])\r\n                for z in range(len(yt)):\r\n                    combined.append(yt[z+1])\r\n                for x in range(len(bi)):\r\n                    combined.append(bi[x+1])\r\n                print(109)\r\n                now = datetime.datetime.now()\r\n                diff = now - last_time\r\n                while diff.total_seconds() < 150:#150:\r\n                    time.sleep(0.1)\r\n                    now = datetime.datetime.now()\r\n                    diff = now - last_time\r\n                print(116)\r\n\r\n                last_time = datetime.datetime.now()\r\n                worksheet['A' + str(j+3)] = last_time.strftime(\"%Y-%m-%d %H:%M:%S\")\r\n                print(120)\r\n                for s in range(len(combined)):\r\n                    worksheet[combinations[s+1] + str(j+3)] = combined[s][0]\r\n                workbook.save(filename)\r\n            except:\r\n                print(125)\r\n                time.sleep(30)\r\n                \r\n        \r\ndef huya(room_id: str) -> map:\r\n    lUserCount = 0 \r\n    liveStatus = \"OFF\"\r\n    try:\r\n        if not room_id.isdigit():\r\n            try:\r\n                headers = {\r\n                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'}\r\n                htmlDoc = requests.get(\r\n                    f'https://m.huya.com/{room_id}', headers=headers)\r\n                soup = BeautifulSoup(htmlDoc.text, 'html.parser')\r\n                a = soup.body.contents[8]\r\n                b = str(a).replace('<script> window.HNF_GLOBAL_INIT = ', '')\r\n                c = str(b).replace('</script>', '')\r\n                jsonContent = json.loads(c)\r\n                room_id = str(jsonContent['roomInfo']\r\n                              ['tProfileInfo']['lProfileRoom'])\r\n            except:\r\n                pass\r\n        api_url = 'https://mp.huya.com/cache.php?m=Live&do=profileRoom&roomid='\r\n        headers = {\r\n            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'}\r\n        html = requests.get(api_url + room_id, headers=headers)\r\n        data = json.loads(html.text)['data']\r\n        data2 = html.json()\r\n\r\n        nick = data['profileInfo']['nick']\r\n        room_name = data['liveData']['introduction']\r\n        liveStatus = data['liveStatus']\r\n        avatar = data['profileInfo']['avatar180']\r\n        lUserCount = data[\"liveData\"][\"userCount\"]\r\n        live_info = data[\"data\"][0]\r\n        vip_count = live_info[\"vipCount\"]\r\n\r\n    except:\r\n        pass\r\n    if liveStatus == \"OFF\" or liveStatus == \"REPLAY\":\r\n        return 0\r\n    else:\r\n        bnb = 0\r\n\r\n    return lUserCount\r\n\r\ndef all_huya_viewers(di):\r\n    lhuyaviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_huya = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(huya(id_huya))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        chaine_analyser.append(id_huya)\r\n        lhuyaviewer[i+1] = chaine_analyser\r\n    return lhuyaviewer\r\n    \r\ndef twitch(channel_name):\r\n    client_id = 'iwosq4fb8p0kkvj3d5gdtp8bcyh3v7'\r\n    access_token = '9yk3hej9w6qwqdn1jjayqg7zielfk1'\r\n    url = f'https://api.twitch.tv/helix/streams?user_login={channel_name}'\r\n    headers = {'Client-ID': client_id,\r\n               'Authorization': f'Bearer {access_token}'}\r\n\r\n    response = requests.get(url, headers=headers)\r\n    data = response.json()['data']\r\n    if len(data) == 0:\r\n        return 0\r\n    else:\r\n        viewers = data[0]['viewer_count']\r\n        return viewers\r\n    \r\ndef id_stream(channel_username,idapi):\r\n    youtube = idapi\r\n    try:\r\n        # Obtenir l'ID du flux en direct de la chaîne\r\n        live_stream_response = youtube.search().list(part='id', channelId=channel_username, type='video', eventType='live', maxResults=1).execute()\r\n        live_stream_id = live_stream_response['items'][0]['id']['videoId']\r\n        \r\n        return live_stream_id \r\n    except IndexError:\r\n        return None\r\n\r\nif __name__ == \"__main__\":\r\n    print(twitch(\"blastpremier\"))\r\n\r\n        \r\ndef id_channel(liste_channel):\r\n    DEVELOPER_KEY = 'AIzaSyBTsRYZtTmwZVx5Yibu5c_2glB1IgufyPc'\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    print(youtube)\r\n    search_response = youtube.search().list(q=liste_channelk, type='channel', part='id').execute()\r\n    channel_id = search_response['items'][0]['id']['channelId']\r\n\r\n    return channel_id\r\n        \r\n\r\ndef true_yt_liste(ytliste,liste_id):\r\n    DEVELOPER_KEY = api_en_cours(api)\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    yt = ytliste\r\n    new_yt_liste = {}\r\n    for i in range(len(yt)):\r\n        switchid = yt[i+1][0]\r\n        currentname = yt[i+1][0]\r\n        language = yt[i+1][1]\r\n        switchid = id_stream(liste_id[i],youtube)\r\n        new_yt_liste[i+1] = []\r\n        new_yt_liste[i+1].append(switchid)\r\n        new_yt_liste[i+1].append(language)\r\n        new_yt_liste[i+1].append(currentname)\r\n    return new_yt_liste\r\n\r\ndef viewer_youtube(id_s):\r\n    if id_s == None:\r\n        return 0\r\n    DEVELOPER_KEY = 'AIzaSyAnfXC89u0jFwXKz9aojJwreYY-i1z7zzg'#elian.ollivier@gmail.com\r\n    youtube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\n    try:\r\n        request = youtube.videos().list(\r\n            part='liveStreamingDetails',\r\n            id=id_s\r\n        )\r\n        response = request.execute()\r\n        viewers = int(response['items'][0]['liveStreamingDetails']['concurrentViewers'])\r\n    except HttpError:\r\n        viewers = 0\r\n    except KeyError:\r\n        viewers = 0\r\n    except IndexError:\r\n        viewers = 0\r\n    except Exception as e:\r\n        viewers = 0\r\n    return viewers\r\n\r\n\r\n\r\n\r\ndef all_youtube_viewers(di):\r\n    lyoutubeviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_youtube = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(viewer_youtube(id_youtube))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        chaine_analyser.append(di[i+1][2])\r\n        lyoutubeviewer[i+1] = chaine_analyser\r\n    return lyoutubeviewer\r\n\r\n\r\ndef all_twitch_viewers(di):\r\n    ltwitchviewer = {}\r\n    for i in range(len(di)):\r\n        try:\r\n            chaine_analyser = []\r\n            id_twitch = di[i+1][0]\r\n            language = di[i+1][1]\r\n            viewers = str(twitch(id_twitch))\r\n            chaine_analyser.append(viewers)\r\n            chaine_analyser.append(language)\r\n            chaine_analyser.append(id_twitch)\r\n            ltwitchviewer[i+1] = chaine_analyser\r\n        except:\r\n            print(di[i+1][0])\r\n            ltwitchviewer[i+1] = [0,'error','error']            \r\n    return ltwitchviewer\r\n\r\n\r\ndef get_full_liste(hy,yt,tw,bi):\r\n    combined = []\r\n    for i in range(len(hy)):\r\n        combined.append(hy[i+1])\r\n    for j in range(len(yt)):\r\n        combined.append(yt[j+1])        \r\n    for k in range(len(tw)):\r\n        combined.append(tw[k+1])\r\n    for l in range(len(bi)):\r\n        combined.append(bi[l+1])    \r\n    return combined\r\n\r\n\r\n\r\ndef convert_number(num):\r\n    if isinstance(num, str):\r\n        # Si l'argument est une chaîne de caractères, on le traite\r\n        parts = num.split(' ')\r\n        if len(parts) == 2:\r\n            if parts[1] == '万':\r\n                return int(float(parts[0]) * 10000)\r\n            if parts[1] == '亿':\r\n                return int(float(parts[0]) * 100000000)\r\n        elif len(parts) == 1:\r\n            return int(0)\r\n        \r\ndef all_bilibili_viewers():\r\n    dictionnaire = {}\r\n    url = \"https://live.bilibili.com/p/eden/area-tags?parentAreaId=13&areaId=561\"\r\n    response = requests.get(url)\r\n    html = response.content\r\n    soup = bs(html, 'html.parser')\r\n    content = soup.find('div', {'class': 'index_1Jokt5rg'})\r\n    tkt_list = content.find_all('div', {'class': 'Item_29AwQRu5'})\r\n    ind = 0\r\n    for tkt in tkt_list:\r\n        nom = tkt.find('div', {'class': 'Item_QAOnosoB'}).text.strip()\r\n        span = tkt.find('span')\r\n        if span:\r\n            span_text = span.text\r\n        audience = convert_number(span_text)\r\n        ind = ind+1\r\n        if nom == '哔哩哔哩王者荣耀赛事':\r\n            nom = 'KPL_bilibili'\r\n        if nom == '哔哩哔哩刀塔2赛事':\r\n            nom = 'Dota_bilibili'\r\n        if nom == '哔哩哔哩英雄联盟赛事':\r\n            nom = 'LOL_bilibili'\r\n        if nom == 'CSGO官方赛事':\r\n            nom = 'CSGO_bilibili'\r\n        if nom == 'CSGO赛事副舞台':\r\n            nom = 'CSGO2_bilibili'\r\n        if nom == '哔哩哔哩LOL赛事直播':\r\n            nom = 'LOL2_bilibili'\r\n        if nom == '无畏契约赛事':\r\n            nom = 'VALO_Bilibili'            \r\n        dictionnaire[ind] = [audience,'chinese',nom]\r\n    return dictionnaire\r\n\r\ndef true_bilibili_liste():\r\n    all_channel = {1: [0,'chinese','KPL_bilibili'],2: [0,'chinese','Dota_bilibili'],3: [0,'chinese','LOL_bilibili'],4: [0,'chinese','CSGO_bilibili'],5: [0,'chinese','CSGO2_bilibili'],6: [0,'chinese','VALO_Bilibili'],7: [0,'chinese','LOL2_bilibili']}\r\n    old_liste = all_bilibili_viewers()\r\n    for i in range(len(old_liste)):\r\n        for j in range(len(all_channel)):        \r\n            if old_liste[i+1][2] == all_channel[j+1][2]:\r\n                all_channel[j+1][0] = old_liste[i+1][0]\r\n    return all_channel\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        ",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1744917709,
          "nanos_since_epoch": 854321600
        }
      },
      {
        "kind": "Directory",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre",
        "expanded": false,
        "include": false,
        "children": [
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\afreecatv.py",
            "content": "\r\n# client_id = 'AqfnFNj9KL4LptSVnL5B'\r\n# client_secret = '0q5ouHZ1fM'\r\n\r\nimport os\r\nimport sys\r\nimport urllib.request\r\nclient_id = 'AqfnFNj9KL4LptSVnL5B'\r\nclient_secret = '0q5ouHZ1fM'\r\nencText = urllib.parse.quote(\"번역할 문장을 입력하세요\")\r\ndata = \"source=ko&target=en&text=\" + encText\r\nurl = \"https://openapi.naver.com/v1/papago/n2mt\"\r\nrequest = urllib.request.Request(url)\r\nrequest.add_header(\"X-Naver-Client-Id\",client_id)\r\nrequest.add_header(\"X-Naver-Client-Secret\",client_secret)\r\nresponse = urllib.request.urlopen(request, data=data.encode(\"utf-8\"))\r\nrescode = response.getcode()\r\nif(rescode==200):\r\n    response_body = response.read()\r\n    print(response_body.decode('utf-8'))\r\nelse:\r\n    print(\"Error Code:\" + rescode)",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1678556616,
              "nanos_since_epoch": 0
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\get aoth token twitch.py",
            "content": "import requests\r\n\r\nclient_id = \"iwosq4fb8p0kkvj3d5gdtp8bcyh3v7\"\r\nclient_secret = \"p1nos9fa9spa5un10mwue7mu05nizx\"\r\n\r\n# Définir les paramètres pour la requête de jeton OAuth\r\nparams = {\r\n    \"client_id\": client_id,\r\n    \"client_secret\": client_secret,\r\n    \"grant_type\": \"client_credentials\"\r\n}\r\n\r\n# Effectuer une requête POST pour obtenir le jeton OAuth\r\nresponse = requests.post(\"https://id.twitch.tv/oauth2/token\", params=params)\r\ndata = response.json()\r\n\r\nif response.status_code == 200:\r\n    access_token = data[\"access_token\"]\r\n    print(\"Jeton OAuth obtenu avec succès:\")\r\n    print(access_token)\r\nelse:\r\n    print(\"Erreur lors de l'obtention du jeton OAuth:\")\r\n    print(data[\"message\"])\r\n",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1734080482,
              "nanos_since_epoch": 33766100
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\PIB.py",
            "content": "import sys\r\nsys.stdout.reconfigure(encoding='utf-8')\r\npib2 = { '🇺🇲': 81695 * 1, '🇺🇸': 81695 * 1, '🇮🇳': 2484 * 1, '🇳🇬': 1621 * 1, '🇬🇧': 48868 * 1, '🇦🇺': 64712 * 1, '🇨🇦': 53371 * 1, '🇿🇦': 6253 * 1, '🇳🇱': 62536 * 1, '🇬🇭': 2238 * 1, '🇵🇰': 1407 * 1, '🇸🇪': 56305 * 1, '🇱🇰': 3828* 1, '🇧🇩': 2529 * 1, '🇸🇩': 2272 * 1, '🇿🇼': 1592 * 1, '🇷🇴': 18419 * 1, '🇳🇿': 48527 * 1, '🇩🇰': 68006 * 1, '🇳🇴': 87961 * 1, '🇰🇪': 1949 * 1, '🇮🇪': 103684 * 1, '🇨🇲': 1667 * 1, '🇸🇬': 84734 * 1, '🇨🇿': 30427 * 1, '🇫🇷': 44460 * 1, '🇩🇿': 5260 * 1, '🇧🇪': 53475 * 1, '🇨🇩': 649 * 1, '🇲🇦': 3672 * 1, '🇨🇭': 99994 * 1, '🇲🇽': 13925 * 1, '🇨🇴': 6979 * 1, '🇦🇷': 13736 * 1, '🇪🇸': 32677 * 1, '🇵🇪': 7789 * 1, '🇻🇪': 16000 * 1, '🇨🇱': 17935 * 1, '🇬🇹': 5797 * 1, '🇪🇨': 6533 * 1, '🇨🇺': 9499 * 1, '🇧🇴': 3701 * 1, '🇩🇴': 10716 * 1, '🇭🇳': 3247 * 1, '🇵🇾': 6260 * 1, '🇳🇮': 2530 * 1, '🇸🇻': 5344 * 1, '🇨🇷': 16585 * 1, '🇵🇦': 18662 * 1, '🇺🇾': 22564 * 1, '🇹🇼': 59398 * 1, '🇭🇰': 50697 * 1, '🇧🇷': 16000 * 1, '🇵🇹': 24567 * 1, '🇷🇺': 12194 * 1, '🇰🇿': 10373 * 1, '🇺🇦': 4835 * 1, '🇦🇿': 5388 * 1, '🇧🇾': 7302 * 1, '🇺🇿': 1983 * 1, '🇰🇬': 1267 * 1, '🇦🇲': 4966 * 1, '🇪🇬': 3968 * 1, '🇸🇦': 23185 * 1, '🇩🇪': 51203 * 1, '🇦🇹': 53637 * 1, '🇰🇷': 34997 * 1, '🇮🇹': 35657 * 1, '🇯🇵': 39312 * 1, '🇵🇱': 18000 * 1, '🇫🇮': 53654 * 1, '🇹🇷': 9661 * 1, '🇹🇭': 7066 * 1, '🇭🇺': 18728 * 1, '🇬🇷': 20169 * 1, '🇻🇳': 3765 * 1, '🇵🇭': 3460 * 1, '🇮🇩': 4332 * 1, '🇨🇳': 12556 * 1, '🇲🇩': 5714 * 1, '🇸🇮': 34100 * 1, '🇧🇦' : 11400 * 1, '🇷🇸': 15100 * 1, '🇸🇰' : 37500 * 1, '🇭🇷' : 40400 * 1, '🇲🇪' : 17400 * 1, '🇲🇰' : 16200 * 1, '🇾🇪' : 2300 * 1, '🇯🇴' : 11000 * 1, '🇰🇼' : 69700 * 1, '🇴🇲' : 45500 * 1, '🇸🇾' : 6600 * 1, '🇦🇪' : 68200 * 1, '🇮🇷' : 20030 * 1, '🇱🇧' : 19500 * 1, '🇶🇦' : 125000 * 1, '🇹🇳' : 12000 * 1, '🇮🇶' : 10800 * 1, '🇱🇾' : 9800 * 1, '🇲🇾' : 28800 * 1, '🇲🇳 ' : 12600 * 1 }\r\n\r\npib = { '🇺🇲': 61 * 1, '🇺🇸': 61 * 1, '🇮🇳': 7 * 1, '🇳🇬': 11 * 1, '🇬🇧': 48 * 1, '🇦🇺': 57 * 1, '🇨🇦': 45 * 1, '🇿🇦': 26 * 1, '🇳🇱': 26 * 1, '🇬🇭': 5 * 1, '🇵🇰': 4 * 1, '🇸🇪': 31 * 1, '🇱🇰': 3 * 1, '🇧🇩': 3 * 1, '🇸🇩': 1 * 1, '🇿🇼': 6 * 1, '🇷🇴': 6 * 1, '🇳🇿': 33 * 1, '🇩🇰': 28 * 1, '🇳🇴': 26 * 1, '🇰🇪': 7 * 1, '🇮🇪': 31 * 1, '🇨🇲': 8 * 1, '🇸🇬': 27 * 1, '🇨🇿': 9 * 1, '🇫🇷': 17 * 1, '🇩🇿': 6 * 1, '🇧🇪': 21 * 1, '🇨🇩': 5 * 1, '🇲🇦': 2 * 1, '🇨🇭': 21 * 1, '🇲🇽': 14 * 1, '🇨🇴': 17 * 1, '🇦🇷': 10 * 1, '🇪🇸': 19 * 1, '🇵🇪': 4 * 1, '🇻🇪': 4 * 1, '🇨🇱': 2 * 1, '🇬🇹': 16 * 1, '🇪🇨': 4 * 1, '🇨🇺': 6 * 1, '🇧🇴': 3 * 1, '🇩🇴': 11 * 1, '🇭🇳': 6 * 1, '🇵🇾': 3 * 1, '🇳🇮': 2 * 1, '🇸🇻': 5 * 1, '🇨🇷': 12 * 1, '🇵🇦': 11 * 1, '🇺🇾': 13 * 1, '🇹🇼': 3 * 1, '🇭🇰': 13 * 1, '🇧🇷': 12 * 1, '🇵🇹': 7 * 1, '🇷🇺': 15 * 1, '🇰🇿': 6 * 1, '🇺🇦': 3 * 1, '🇦🇿': 5 * 1, '🇧🇾': 3 * 1, '🇺🇿': 2 * 1, '🇰🇬': 1 * 1, '🇦🇲': 5 * 1, '🇪🇬': 6 * 1, '🇸🇦': 9 * 1, '🇩🇪': 22 * 1, '🇦🇹': 45 * 1, '🇰🇷': 10 * 1, '🇮🇹': 13 * 1, '🇯🇵': 14 * 1, '🇵🇱': 7  * 1, '🇫🇮': 45  * 1, '🇹🇷': 6 * 1, '🇹🇭': 17 * 1, '🇭🇺': 13 * 1, '🇬🇷': 16 * 1, '🇻🇳': 3 * 1, '🇵🇭': 4 * 1, '🇮🇩': 6 * 1, '🇨🇳': 11 * 1, '🇲🇩': 5 * 1, '🇸🇮': 34 * 1, '🇧🇦' : 11 * 1, '🇷🇸': 4 * 1, '🇸🇰' : 33 * 1, '🇭🇷' : 30 * 1, '🇲🇪' : 55 * 1, '🇲🇰' : 4 * 1, '🇾🇪' : 11 * 1, '🇯🇴' : 3 * 1, '🇰🇼' : 11 * 1, '🇴🇲' : 11 * 1, '🇸🇾' : 1 * 1, '🇦🇪' : 15 * 1, '🇮🇷' : 3 * 1, '🇱🇧' : 3 * 1, '🇶🇦' : 10 * 1, '🇹🇳' : 5* 1, '🇮🇶' : 4* 1, '🇱🇾' : 2 * 1, '🇲🇾' : 11 * 1, '🇲🇳 ' : 7 * 1 }\r\n\r\nif __name__ == \"__main__\":\r\n    pib3 = {}\r\n    for x in pib2:\r\n        pib3[x] = round((pib2[x] + pib[x]*(40000/17))/2)\r\n    print(pib3)",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1721908716,
              "nanos_since_epoch": 439502500
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\suprexcel.py",
            "content": "from openpyxl import Workbook\r\nfrom openpyxl.utils import get_column_letter\r\nfrom datetime import datetime\r\nimport time\r\n\r\ndef create_excel_file(filename, data):\r\n    # Crée un nouveau fichier Excel\r\n    workbook = Workbook()\r\n\r\n    # Ajoute une feuille de calcul\r\n    worksheet = workbook.active\r\n\r\n    # Langues à ajouter en première ligne\r\n    languages = ['english', 'french', 'korean', 'german', 'italian', 'japanese', 'spanish', 'polish', 'portuguese', 'russian', 'finnish', 'turkish', 'thai', 'hungarian', 'greek', 'ukrainian', 'arabic', 'vietnamese', 'philipin', 'indonesia', 'chinesehk', 'chinese']\r\n\r\n    # Ajoute les langues à la première ligne du tableau\r\n    for i, language in enumerate(languages):\r\n        column_letter = get_column_letter(i+2)\r\n        worksheet[column_letter + '1'] = language\r\n\r\n    # Ajoute la date et l'heure à la cellule A2 avec une latence de 2 secondes\r\n    for j in range(50):\r\n        time.sleep(2.0)\r\n\r\n        now = datetime.now()\r\n        worksheet['A' + str(j+2)] = now.strftime(\"%Y-%m-%d %H:%M:%S\")\r\n\r\n        # Ajoute les données à la deuxième ligne du tableau\r\n        for i, value in enumerate(data):\r\n            # Récupère l'index de la colonne correspondant à la langue\r\n            language_index = languages.index(value[1])\r\n\r\n            # Ajoute la valeur à la colonne correspondante\r\n            column_letter = get_column_letter(language_index+2)\r\n            worksheet[column_letter + str(j+2)] = value[0]\r\n        print(j)\r\n        workbook.save(filename)\r\n\r\n   # Sauvegarde le fichier Excel\r\n\r\nfilename = 'example.xlsx'\r\ndata = [['3637912', 'chinese'], ['8461', 'french'], ['116626', 'portuguese'], ['62242', 'english']]\r\ncreate_excel_file(filename, data)\r\n",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1677959268,
              "nanos_since_epoch": 0
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\telegram.py",
            "content": "from telethon import TelegramClient\r\nfrom telethon.tl.types import InputPeerChannel\r\nfrom telethon.tl.functions.channels import GetFullChannelRequest\r\nfrom telethon.tl.functions.phone import GetGroupCallRequest\r\n\r\n# Remplacez ces valeurs par vos propres identifiants\r\napi_id = '15370596'\r\napi_hash = '36ca62e65c3fbf8c8cb6d397cfc3f3ea'\r\nphone_number = '+33635933310'\r\n\r\nclient = TelegramClient('session', api_id, api_hash)\r\n\r\nasync def get_live_audience(name_telegram_channel:str):\r\n    await client.start(phone=phone_number)\r\n    \r\n    # Remplacez 'nom_du_canal' par le nom du canal que vous souhaitez vérifier\r\n    channel = await client.get_entity(name_telegram_channel)\r\n    full_channel = await client(GetFullChannelRequest(channel=channel))\r\n\r\n    if full_channel.full_chat.call:\r\n        # Limite arbitraire pour le nombre de participants à récupérer (peut être ajustée)\r\n        limit = 1  # Il suffit d'un participant pour obtenir les détails de l'appel\r\n\r\n        # Récupérer les informations de l'appel de groupe (stream)\r\n        group_call = await client(GetGroupCallRequest(call=full_channel.full_chat.call, limit=limit))\r\n        participants_count = group_call.call.participants_count\r\n        print(f\"Nombre de spectateurs en direct : {participants_count}\")\r\n    else:\r\n        print(\"Aucun live en cours sur ce canal\")\r\n\r\n    await client.disconnect()\r\n\r\nclient.loop.run_until_complete(get_live_audience(\"dinosplay313\"))\r\n",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1725627634,
              "nanos_since_epoch": 425301500
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\tempCodeRunnerFile.py",
            "content": "    await client.start(phone=phone_number)",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1725100982,
              "nanos_since_epoch": 617947800
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\twitch.py",
            "content": "import requests\r\n\r\ndef twitch(channel_name):\r\n    client_id = 'iwosq4fb8p0kkvj3d5gdtp8bcyh3v7'\r\n    access_token = '4b0s4wxev67cmoxkfdob9147ra79qu'\r\n\r\n    url = f'https://api.twitch.tv/helix/streams?user_login={channel_name}'\r\n    headers = {'Client-ID': client_id,\r\n               'Authorization': f'Bearer {access_token}'}\r\n\r\n    response = requests.get(url, headers=headers)\r\n    data = response.json()['data']\r\n\r\n    if len(data) == 0:\r\n        return 0\r\n    else:\r\n        viewers = data[0]['viewer_count']\r\n        return viewers\r\n\r\n\r\n\r\ndef all_twitch_viewers(di):\r\n    ltwitchviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_twitch = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(twitch(id_twitch))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        ltwitchviewer[i+1] = chaine_analyser\r\n    return ltwitchviewer\r\n\r\ntesttwitch = {1:['jbzzed','french'],2:['VALORANT_BR','portuguese']}\r\n",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1677951766,
              "nanos_since_epoch": 0
            }
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\youtube.py",
            "content": "from googleapiclient.discovery import build\r\nfrom googleapiclient.errors import HttpError\r\n\r\nDEVELOPER_KEY = 'AIzaSyAQvZCqMMLLe-9rjC2bb44qygKDqn5OaBs'\r\nyoutube = build('youtube', 'v3', developerKey=DEVELOPER_KEY)\r\ntesthuya = {1:['@ValorantEsports','english'],2:['@8bitBinks69','english'],3:['@valorantesportsbr','portuguese']}\r\n\r\n    # Obtenir l'ID de la chaîne à partir de l'URL ou du nom d'utilisateur\r\ndef id_stream(channel_username):\r\n    search_response = youtube.search().list(q=channel_username, type='channel', part='id').execute()\r\n    channel_id = search_response['items'][0]['id']['channelId']\r\n    #print(\"Channel ID: \", channel_id)\r\n\r\n    # Obtenir l'ID du flux en direct de la chaîne\r\n    live_stream_response = youtube.search().list(part='id', channelId=channel_id, type='video', eventType='live', maxResults=1).execute()\r\n    live_stream_id = live_stream_response['items'][0]['id']['videoId']\r\n    return live_stream_id\r\n\r\ndef viewer_youtube(channel):\r\n    request = youtube.videos().list(\r\n        part='liveStreamingDetails',\r\n        id=id_stream(channel)\r\n    )\r\n\r\n    response = request.execute()\r\n\r\n    viewers = int(response['items'][0]['liveStreamingDetails']['concurrentViewers'])\r\n    return viewers\r\n\r\n\r\ndef all_youtube_viewers(di):\r\n    lyoutubeviewer = {}\r\n    for i in range(len(di)):\r\n        chaine_analyser = []\r\n        id_youtube = di[i+1][0]\r\n        language = di[i+1][1]\r\n        viewers = str(viewer_youtube(id_youtube))\r\n        chaine_analyser.append(viewers)\r\n        chaine_analyser.append(language)\r\n        lyoutubeviewer[i+1] = chaine_analyser\r\n    return lyoutubeviewer",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1696962163,
              "nanos_since_epoch": 449594200
            }
          },
          {
            "kind": "Directory",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\autre\\__pycache__",
            "expanded": false,
            "include": false,
            "children": []
          }
        ]
      },
      {
        "kind": "Directory",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\BDD fichier excel",
        "expanded": false,
        "include": false,
        "children": []
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\CVT.py",
        "content": "import openpyxl\r\nfrom openpyxl import load_workbook\r\nimport pyperclip\r\nimport math\r\n\r\niem = ['eslcs','rootthegamer','@CSGOVODsMaincast','psp1g','ohnepixel','csgo_paragon','nikolarn','buster','gaules','1pvcs','csgo_mc','eslcsb','ale_apoka','esl_cs_es','rtparenacsgo','lobanjicaa','stewie2k','99damage','esl_csgo_pl','csgomc_ua','@FANKOV01','123321','52327','@ESLCS','@OnGamingVTVcab','forg1','fl0m','michel','elisaviihdesport','anastaze','teeqo']\r\nblast = ['gaules','blastpremier','ohnepixel','pelaajatcom','relog_ru','mgg_fr','izakooo','fl0m','rtparenacsgo','forg1','csgomc_ua','ale_apoka','pituherranz','@BLASTPremier','@500BROSCSGO','123321','52327','CSGO_bilibili','CSGO2_bilibili']\r\nlec = ['japanesekoreanug','25552153','lec','otplol_','lvpes','iwdominate','summonersinnlive','imls','polsatgames','pg_esports_lol','riotgamesturkish','caedrel','573076','@SummonerInnDE','@LEC','@Lolespor','ibai','teamheretics','inygontv1','gamersloungegr','esport2tv','@GamersLoungeGr','@PolsatGames']\r\nlpl = ['660000','nervarien','660137','tolkin','iwdominate','ericatlol','lpl','caedrel','@LPLOfficial','kiittwy','@SofMM','teshrak','yamatocannon','midbeast','champi14','LOL_bilibili','LOL2_bilibili','@bi88sheng']\r\ncblol = ['baiano','cblol','573076','@CBLOL','25552153']\r\nlfl = ['otplol_','shaunz','solary','kamet0','573076','25552153']\r\nlcs = ['573076','lcs','25552153','baiano','iwdominate','imls','sneakylol','meteos','yamatocannon','@LCS']\r\nlck = ['lck','caedrel','otplol_','@LCKCarry','imls','tolkin','mfreak00','carry_game','japanesekoreanug','ericatlol','halpern','iwdominate','kenrhen','lol_nemesis','660001','@LCK','@LCKTiengViet','@LCKglobal']\r\neum = ['emeamasters','lec','@Lolespor','@PolsatGames','@SummonerInnDE','@GamersLoungeGr','otplol_','lvpes','iwdominate','riotgamesturkish','summonersinnlive''polsatgames','inygontv1','573076','25552153']\r\nvctp = ['valorant_jpn','im_mittiii','valorant_pacific','akarindao','vorzu','valorant','superbuss_','valorant_kr','vqalorant_th','blackelespanolito','valorant_tw','thinkingmansvalo','sliggytv','jasper7se','spicyuuu','valorant_id','@VALORANTjp','@VCTPacific','@VALORANTEsportsTH','@VALORANTEsportsIndonesia','@8bitBinks69','@VALORANTChampionsTourVietnam','@VCTkr','@SnaxGaming','@Bomman','@VALORANTEsportsPH','viperdemon','nambong94','fps_shaka','ade3_3','boomburapa','mother3rd']\r\nkpl = ['660002','KPL_bilibili']\r\nvcte = ['ibai','sideshow','thegrefg','valorant','valorant_emea','kamet0','jbzzed','hitboxking','VALORANTChallengersTR','blackelespanolito','sirmaza','valorant_fr','saamtwo','sliggytv','starwraith','valorant_es','da1mon','thinkingmansvalo','lucasrojo','pow3r','ubeka_','@VALORANTEsportsEMEA','@VALORANTRegionalLeagueTR','alfajer','stansmith_jp','blackelespanolito','fatiiiih','7ssk7','roundzzzzz','damysus','superbuss_','da1mon','mimimimichaela','harmii','benjyfishy','kubafps','sizophren','sergiofferra','spygea','combatry','2xciv','rax1337']\r\nvcta = ['valorant_americas','valorant','hitboxking','sliggytv','blackelespanolito','tenz','thinkingmansvalo','@valorant_americas','@VALORANTEsportsLA','@valorantesportsbr','valorant_br','subroza','coreano','gabepeixe','shanks_ttv','sinatraa','valorant_la','tteuw','schrodingerlee','woohoojin','averagejonas','xarola_','tarik','lucasrojo','vela','loud_coringa','wtcn']\r\nvcs = ['vcsenglish','573076','25552153','@vcslmht']\r\nvcn = ['660679','VALO_Bilibili','valorantesports_cn']\r\ndotamaj = ['@kuyanicwxc','esl_dota2','211888','nix','paragon_dota','gorgc','just_ns','tpabomah','esb_dota2','dreadztv','dota2mc_ua','lightfurylf','froggedtv','123888','310112','@ESLDota2','@OnGamingVTVcab','@WxCIndonesia','@23EsportsTV']\r\nrlcs = ['rocketleague','rocketbaguette','rizzo','rosdri_twitch','rocketstreetlive','retalsrl','@rlesports','rasmelthor','zoomaa','rocketleaguesam','ixkillerx']\r\nmaster = ['660679','tarik','fps_shaka','bucher','valorant','tenz','valorant_kr','ayatsunoyuni_stellive','coreano','shahzam','valorant_tw','superbuss_','ade3_3','hyoon','valorant_ph','valorant_br','sliggytv','hitboxking','boomburapa','akarindao','vorzu','valorant_la','sirmaza','thinkingmansvalo','frttt','xarola_','viperdemon','supertf','clutch_fii','wtcn','valorant_tur','flamekr','somarcus','valorant_fr','valorant_id','valorant_th','roundzzzzz','@VALORANTjp','@ValorantEsports','@VALORANTEsportsIndonesia','@VCTkr','loud_coringa','@valorantesportsbr','@VALORANTChampionsTourVietnam','VALO_Bilibili','@VALORANTEsportsTH','@VALORANTEsportsTW','@shiranamiramune','@VALORANTEsportsPH','wtcn','mixwell','valorant_jpn','recrent','tck10','vodkavdk','sergiofferra','im_mittiii','blackelespanolito','laplusdarknesss_hololive','cr_rion','michel','tteuw','combatry','subroza','kimdoenmo','harmii','lucasrojo','vela','averagejonas','tolkin','mahluna','valorant_es','crazyfacetw','da1mon','paulanobre','7ssk7','assentw','@VALORANTChallengersTR','@VALORANTEsportsLA','@8bitBinks69']\r\n\r\n\r\nworlds = ['LOL_bilibili','660000','@vcslmht','@SummonerInnDE','@Lolespor','@LoLeSportsJP','@hoangluanblv','@LCK','@lolpacific','@CBLOL','yamatocannon','esport2tv','@PolsatGames','polsatgames','lynxcerezlol','liang_0714','pg_esports_lol','takayaspecial','sneakylol','japanesekoreanug','revolta','riotgamesturkish','jukes','summonersinnlive','imls','bbbb87','tolkin','iwdominate','lla','@lla','alfrea','yoda','lvpes','cblol','fps_shaka','otplol_','caedrel','riotgamesjp','lolpacifictw','ibai','baiano','riotgames','loud_coringa','nervarien','@lolesports','doublelift','sapnaplive','nickdaboom','neckolol','sabrinoca','absoluttlol','ericatlol','broxah']\r\ndef spr(liste,name):\r\n    nom = name+'.xlsx'\r\n    based = modify_excel(nom,liste)\r\n    t = nombres_absents(based)\r\n    wb = openpyxl.load_workbook(nom)\r\n    feuille = wb.worksheets[0]\r\n    n = 0\r\n    for i in range(len(t)):\r\n        r = t[i]\r\n        r = r-n\r\n        feuille.delete_cols(r+1)\r\n        n = n+1\r\n    n = 0\r\n    wb.save('spr'+nom)\r\n\r\n\r\ndef modify_excel(filename, columns_to_keep):\r\n    # Charger le fichier Excel existant\r\n    workbook = load_workbook(filename)\r\n    worksheet = workbook.active\r\n\r\n    # Trouver les index des colonnes à conserver\r\n    columns_to_keep_indices = [0]\r\n    for i, cell in enumerate(worksheet[2]):\r\n        if i > 0 and cell.value in columns_to_keep:\r\n            columns_to_keep_indices.append(i)\r\n\r\n    # Enregistrer les modifications apportées au fichier Excel\r\n    workbook.save(filename)\r\n    return columns_to_keep_indices\r\n\r\n\r\ndef nombres_absents(liste):\r\n    # Créer une liste de tous les nombres de 0 à 5\r\n    tous_nombres = list(range(400))\r\n\r\n    # Supprimer les nombres présents dans la liste donnée en paramètre\r\n    for nombre in liste:\r\n        if nombre in tous_nombres:\r\n            tous_nombres.remove(nombre)\r\n\r\n    # Retourner la liste des nombres restants\r\n    return tous_nombres\r\n\r\n############### convertisseur #############\r\n\r\ndef modifier_dictionnaire(dictionnaire):\r\n    nouveau_dictionnaire = {}\r\n    for cle, valeur in dictionnaire.items():\r\n        valeur_modifiee = valeur.replace(\" \", \"\")\r\n        valeur_modifiee = int(valeur_modifiee)\r\n        \r\n        # Conversion en format abrégé\r\n        if valeur_modifiee >= 1_000_000:\r\n            valeur_modifiee = str(round(valeur_modifiee / 1_000_000, 2)) + 'M'\r\n        elif valeur_modifiee >= 1_000:\r\n            valeur_modifiee = str(round(valeur_modifiee / 1_000, 1)) + 'K'\r\n        else:\r\n            valeur_modifiee = str(valeur_modifiee)\r\n        \r\n        nouveau_dictionnaire[cle] = valeur_modifiee\r\n    return nouveau_dictionnaire\r\n\r\ndef creer_dictionnaire(parametre):\r\n    dictionnaire = {}\r\n    index = 0\r\n    while index < len(parametre):\r\n        if parametre[index] == '🇺🇸':\r\n            drapeau = '🇺🇸'\r\n            index += 2\r\n        else:\r\n            drapeau = parametre[index] + parametre[index+1]\r\n            index += 2\r\n        valeur = \"\"\r\n        while index < len(parametre) and (parametre[index].isdigit() or parametre[index] == ','):\r\n            if parametre[index] == ',':\r\n                break  # Sortir de la boucle si on rencontre une virgule\r\n            valeur += parametre[index]\r\n            index += 1\r\n        if valeur != \"\":\r\n            valeur = \"{:,}\".format(int(valeur)).replace(',', ' ')\r\n            dictionnaire[drapeau] = valeur\r\n        else:\r\n            dictionnaire[drapeau] = \"0\"\r\n\r\n    # Supprimer les clés comportant des chiffres ou des virgules\r\n    dictionnaire = {k: v for k, v in dictionnaire.items() if not any(c.isdigit() or c == ',' for c in k)}\r\n    \r\n    # Supprimer les valeurs du dictionnaire dont les clés sont égales à \"0\"\r\n    dictionnaire = {k: v for k, v in dictionnaire.items() if v != \"0\"}\r\n\r\n    return dict(sorted(dictionnaire.items(), key=lambda x: int(x[1].replace(' ', '')), reverse=True))\r\n\r\ndef realview(chaine):\r\n    parties = chaine.split('|')\r\n    parties = [partie.strip() for partie in parties]\r\n    parties = [partie.replace('\\u202f', '') for partie in parties]\r\n    parties[0] = parties[0][1:]\r\n    parties[1] = parties[1][:-1]\r\n    pays1 = parties[0][0]+ parties[0][1]\r\n    pays2 = parties[1][0]+ parties[1][1]\r\n    liste_caracteres = parties\r\n    nombres = []\r\n    for caractere in liste_caracteres:\r\n        nombre_str = ''\r\n        for char in caractere:\r\n            if char.isdigit() or char == '.' or char == ',':\r\n                nombre_str += char\r\n            elif char.isalpha():\r\n                break\r\n        nombre_str = nombre_str.replace(',', '.')\r\n        nombres.append(nombre_str)\r\n\r\n    result = []\r\n    for nombre in nombres:\r\n        nombre_float = float(nombre.replace(' ', '').replace(' ', '').replace(',', '.'))\r\n        if nombre_float < 1000:\r\n            nombre_modifie = f'{nombre_float}K'\r\n        else:\r\n            nombre_modifie = f'{nombre_float/1000:.2f}M'\r\n        result.append(nombre_modifie)\r\n    preresult = \"(\" + pays1 + \" : \"+ result[0] + \" | \" + pays2 + \" : \" + result[1] + \")\"\r\n    return preresult\r\n\r\ndef cvt():\r\n    texte : str = input(\"Veuillez entrez le cvt\")\r\n    texte_extrait = \"\"\r\n    suite = \"\"\r\n    parenthese_ouverte = 0\r\n    apres_parenthese_fermee = False\r\n\r\n    for char in texte:\r\n        if not apres_parenthese_fermee:\r\n            texte_extrait += char\r\n        else:\r\n            suite += char\r\n\r\n        if char == \"(\":\r\n            parenthese_ouverte += 1\r\n        elif char == \")\":\r\n            parenthese_ouverte -= 1\r\n            if parenthese_ouverte == 0:\r\n                apres_parenthese_fermee = True\r\n    texte_extrait = realview(texte_extrait)\r\n    invalid = creer_dictionnaire(suite)\r\n    #st = modifier_dictionnaire(invalid)\r\n    \r\n    final = \"\"\r\n    final = texte_extrait + \" | \"\r\n    for i in range(len(invalid)):\r\n        final += list(invalid.keys())[i] + \" : \" +  list(invalid.values())[i] + \" | \"\r\n    pyperclip.copy(final)\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    cvt()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Chinese Audience\r\n \r\n    \r\ndef bilibilis(view):\r\n    return int(((3.25 / (1.29**(math.log10(view + 1E-21) - 1.2503))) * 56 * view)/1000)\r\n\r\ndef master17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(3.23E-05 * valeur + 0.45)+s)\r\n\r\ndef mastercn17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(0.626 + -1.49E-04 * valeur + 5.58E-08 * valeur**2)+s)\r\n\r\ndef lpl17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(((valeur*(0.264 + 3.7E-05*valeur + -1.64E-09*valeur**2 + 1.89E-14*valeur**3)+s)*1000)/2095)\r\n\r\ndef lck17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(-0.537 + 0.0758 * math.log(valeur))+s)    \r\n\r\n\r\ndef lfl17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(2.53E-04 * math.exp(4.68E-03 * valeur))+s)    \r\n\r\ndef csgoh17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(0.548 * math.exp(-8.07E-05 * valeur))+s)\r\n\r\ndef csgoh18h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(0.663 * math.exp(-6.61E-05 * valeur))+s)\r\n\r\ndef csgoh19h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(2.75E-05 * valeur + 0.233)+s)\r\n\r\n\r\ndef csgo17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(2.58E-05*valeur + 0.14)+s)\r\ndef csgo21h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(0.0892 * math.exp(2E-04 * valeur))+s)\r\n\r\ndef lec17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(5.12E-07 * valeur + 0.0406))\r\n\r\ndef vcn17h(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(0.158 * math.exp(2.58E-04 * valeur))+s)\r\n\r\ndef lcka(valeur, bilibili=None):\r\n    s = 0\r\n    if bilibili != None:\r\n        s = bilibilis(bilibili)\r\n    return int(valeur*(-8.85E-03*valeur + 2.69))\r\n\r\n",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1726261840,
          "nanos_since_epoch": 434795800
        }
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\MoreInfo.py",
        "content": "import pyperclip\r\nimport random\r\nfrom openpyxl import load_workbook\r\nimport sys\r\nsys.stdout.reconfigure(encoding='utf-8')\r\n\r\npib = {\r\n    '🇺🇲': 112612, \r\n     '🇺🇸': 112612, \r\n     '🇮🇳': 9477, \r\n     '🇳🇬': 13752, \r\n     '🇬🇧': 80905, \r\n     '🇦🇺': 99415, \r\n     '🇨🇦': 79627, \r\n     '🇿🇦': 33715, \r\n     '🇳🇱': 61856, \r\n     '🇬🇭': 7001, \r\n     '🇵🇰': 5409, \r\n     '🇸🇪': 64623, \r\n     '🇱🇰': 5443, \r\n     '🇧🇩': 4794, \r\n     '🇸🇩': 2312, \r\n     '🇿🇼': 7855, \r\n     '🇷🇴': 16268, \r\n     '🇳🇿': 63087, \r\n     '🇩🇰': 66944, \r\n     '🇳🇴': 74569, \r\n     '🇰🇪': 9210, \r\n     '🇮🇪': 88313, \r\n     '🇨🇲': 10245, \r\n     '🇸🇬': 74132, \r\n     '🇨🇿': 25802, \r\n     '🇫🇷': 42230, \r\n     '🇩🇿': 9689, \r\n     '🇧🇪': 51443, \r\n     '🇨🇩': 6207, \r\n     '🇲🇦': 4189, \r\n     '🇨🇭': 74703, \r\n     '🇲🇽': 23433, \r\n     '🇨🇴': 23490, \r\n     '🇦🇷': 18633, \r\n     '🇪🇸': 38691, \r\n     '🇵🇪': 8600,\r\n     '🇻🇪': 12706, \r\n     '🇨🇱': 11320, \r\n     '🇬🇹': 21722, \r\n     '🇪🇨': 7972, \r\n     '🇨🇺': 11808, \r\n     '🇧🇴': 5380, \r\n     '🇩🇴': 18299, \r\n     '🇭🇳': 8682, \r\n     '🇵🇾': 6659, \r\n     '🇳🇮': 3618, \r\n     '🇸🇻': 8554, \r\n     '🇨🇷': 22410, \r\n     '🇵🇦': 22272, \r\n     '🇺🇾': 26576, \r\n     '🇹🇼': 33228, \r\n     '🇭🇰': 40643, \r\n     '🇧🇷': 22118, \r\n     '🇵🇹': 20519, \r\n     '🇷🇺': 23744, \r\n     '🇰🇿': 12245, \r\n     '🇺🇦': 5947, \r\n     '🇦🇿': 8576, \r\n     '🇧🇾': 7180, \r\n     '🇺🇿': 3344, \r\n     '🇰🇬': 1810, \r\n     '🇦🇲': 8365, \r\n     '🇪🇬': 9043, \r\n     '🇸🇦': 22181, \r\n     '🇩🇪': 51484, \r\n     '🇦🇹': 79760, \r\n     '🇰🇷': 29263, \r\n     '🇮🇹': 33123, \r\n     '🇯🇵': 36127, \r\n     '🇵🇱': 17235, \r\n     '🇫🇮': 79768, \r\n     '🇹🇷': 11889, \r\n     '🇹🇭': 23533, \r\n     '🇭🇺': 24658, \r\n     '🇬🇷': 28908, \r\n     '🇻🇳': 5412, \r\n     '🇵🇭': 6436, \r\n     '🇮🇩': 9225, \r\n     '🇨🇳': 19219, \r\n     '🇲🇩': 8739, \r\n     '🇸🇮': 57050, \r\n     '🇧🇦': 18641, \r\n     '🇷🇸': 12256, \r\n     '🇸🇰': 57574, \r\n     '🇭🇷': 55494, \r\n     '🇲🇪': 73406, \r\n     '🇲🇰': 12806, \r\n     '🇾🇪': 14091, \r\n     '🇯🇴': 9029, \r\n     '🇰🇼': 47791, \r\n     '🇴🇲': 35691, \r\n     '🇸🇾': 4476, \r\n     '🇦🇪': 51747, \r\n     '🇮🇷': 13544, \r\n     '🇱🇧': 13279, \r\n     '🇶🇦': 74265, \r\n     '🇹🇳': 11882, \r\n     '🇮🇶': 10106, \r\n     '🇱🇾': 7253, \r\n     '🇲🇾': 27341, \r\n     '🇲🇳 ': 14535}\r\n\r\n\r\n#Stade : 4% minimum, prix total / League 20%\r\n#Organisation : LPL : 7%, VCT : 6%, CSGO : 5%, World : 12%\r\n#Cash Prize : World {tous les jeux} : 60%, LPL : 50%, MSI : 30%, ESL, IEM ... : 60%, le reste : 50%~40%, Arabie Saoudite 80%\r\n\r\ndef compet(liste,ave,matchstd,afflu,hw,invest_stade,orga,cp):\r\n    \r\n    affichage = ''\r\n    loc = aveviewers(liste,ave)\r\n    affichage += convertir_nombrepib(convert_to_number(loc[0])) #Average viewers\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib(hw*loc[1]) #Hours Watched\r\n    affichage += \"\\n\"\r\n    affichage += moy(liste,ave) #décomposition average viewers\r\n    affichage += \"\\n\" + str(matchstd)\r\n    affichage += \"\\n\" + str(afflu) # affluence moyenne\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib(((((convert_to_number(loc[0])/1000000)**(1/1.3))/24)*250)*matchstd*afflu) + \"€\" #nombre de ticket en €\r\n    affichage += \"\\n\"\r\n    droit_total = droittv(liste,hw*loc[1])  \r\n    affichage += convertir_nombrepib(droit_total[1]) + \"€\" # Droit tv Total\r\n    affichage += \"\\n\" + droit_total[0] # Droit tv décomposé\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib((hw*loc[1])*0.125*((droit_total[1])/((hw*loc[1])/2))) + \"€\" #Sponsor\r\n    affichage += \"\\n\\n\"\r\n    ca = (hw*loc[1])*0.125*((droit_total[1])/((hw*loc[1])/2))+droit_total[1]+((((convert_to_number(loc[0])/1000000)**(1/1.3))/24)*250)*matchstd*afflu \r\n    affichage += convertir_nombrepib(ca) + \"€\" # Chiffre d'affaire\r\n    affichage += \"\\n\"\r\n    if invest_stade < 1:\r\n        g = ca*invest_stade\r\n    if invest_stade > 1:\r\n        g = invest_stade    \r\n    affichage += convertir_nombrepib(g) + \"€\"\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib(ca*orga) + \"€\"\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib(ca*cp) + \"€\"\r\n    affichage += \"\\n\"\r\n    affichage += convertir_nombrepib(ca-(orga+cp)*ca-g) + \"€\"\r\n    print(affichage)\r\n    pyperclip.copy(affichage)\r\n\r\n\r\n    \r\n    \r\ndef aveviewers(liste,ave):\r\n    #pyperclip.copy(\"Ligne 1\\nLigne 2\")\r\n    afficher = ''\r\n    l = fusion(liste)\r\n    valeur1 = l['1']\r\n    valeurtotal = l['total']\r\n    coef = ave/valeur1\r\n    valeurtotal *= coef\r\n    aveviewer = convertir_nombre(round(valeurtotal))\r\n    return (aveviewer,valeurtotal/ave)\r\n    \r\n\r\n    \r\n\r\ndef droittv(liste,hw):\r\n    l = fusion(liste)\r\n    coef = hw/l['total']\r\n    del l['total']\r\n    del l['🇺🇳']\r\n    del l['1']\r\n    for i in l:\r\n        l[i] = l[i]*coef\r\n    for j in l:\r\n        for k in pib:\r\n            if j == k:\r\n                pb = pib[k]/40000\r\n        l[j] = round((pb/2)*l[j])\r\n    l = dict(sorted(l.items(), key=lambda x: x[1], reverse=True))\r\n    total = sum(l.values())\r\n    for s in l:\r\n        l[s] = convertir_nombrepib(l[s])\r\n    \r\n    afficher = ''\r\n    for c in l:\r\n        afficher +=  c + ' : ' + l[c] + '€ | '\r\n    return (afficher,total)\r\n    \r\n\r\n\r\ndef moy(liste,ave):\r\n    afficher = ''\r\n    l = fusion(liste)\r\n    valeur1 = l['1']\r\n    valeurcn = l['🇺🇳']\r\n    valeurtotal = l['total']\r\n    coef = ave/valeur1\r\n    valeurcn *= coef\r\n    valeurtotal *= coef\r\n    afficher = '(🇺🇳 : ' + convertir_nombre(ave) + ' | 🇺🇳 : '+ convertir_nombre(round(valeurcn)) + ')'\r\n    del l['total']\r\n    del l['🇺🇳']\r\n    del l['1']\r\n    l = dict(sorted(l.items(), key=lambda x: x[1], reverse=True))\r\n    for c in l:\r\n        afficher += ' | ' + c + ' : ' +ajouter_espaces(round(l[c]*coef))\r\n    return afficher\r\n    \r\ndef convertir_nombre(n):\r\n    s = n\r\n    suffixes = ['K', 'M', '']\r\n    suffixe_index = 0\r\n\r\n    while n >= 1000 and suffixe_index < len(suffixes):\r\n        n /= 1000.0\r\n        suffixe_index += 1\r\n\r\n    if isinstance(n, int):\r\n        return '{0:d}{1}'.format(int(n), suffixes[suffixe_index-1])\r\n    elif s >= 1000000:\r\n        return '{0:.2f}{1}'.format(n, suffixes[suffixe_index-1])\r\n    else:\r\n        return '{0:.1f}{1}'.format(n, suffixes[suffixe_index-1])\r\n\r\ndef convertir_nombrepib(n):\r\n    s = n\r\n    suffixes = ['K', 'M', 'Mrd','']\r\n    suffixe_index = 0\r\n\r\n    while n >= 1000 and suffixe_index < len(suffixes):\r\n        n /= 1000.0\r\n        suffixe_index += 1\r\n\r\n    if isinstance(n, int):\r\n        return '{0:d}{1}'.format(int(n), suffixes[suffixe_index-1])\r\n    elif s >= 1000000 and s<= 1000000000:\r\n        return '{0:.1f}{1}'.format(n, suffixes[suffixe_index-1])\r\n    elif s >= 1000000000:\r\n        return '{0:.3f}{1}'.format(n, suffixes[suffixe_index-1])\r\n    else:\r\n        return '{0:.1f}{1}'.format(n, suffixes[suffixe_index-1])\r\n            \r\n\r\ndef ajouter_espaces(nombre):\r\n    nombre_str = str(nombre)\r\n    nombre_avec_espaces = \"\"\r\n    longueur = len(nombre_str)\r\n\r\n    for i in range(longueur):\r\n        indice = longueur - i - 1\r\n        nombre_avec_espaces = nombre_str[indice] + nombre_avec_espaces\r\n\r\n        if i % 3 == 2 and i != longueur - 1:\r\n            nombre_avec_espaces = \" \" + nombre_avec_espaces\r\n\r\n    return nombre_avec_espaces\r\n\r\ndef decompile(liste):\r\n    k = []\r\n    r = 0\r\n    for i in range(len(liste)):\r\n        if i-r != 0 and liste[i-r] == '(':\r\n            k.append(liste[:i-r-1])\r\n            liste = liste[i-r:]\r\n            r = i\r\n        if i-r == len(liste)-1:\r\n            k.append(liste)\r\n    for l in range(len(k)):\r\n        extracted = extract_data_from_string(k[l])\r\n        k[l] = extracted\r\n    return k\r\n\r\n\r\n\r\ndef fusion(liste,coef=None,):\r\n    liste_dictionnaires = decompile(liste)\r\n    resultat = {}\r\n    total = 0\r\n    for dictionnaire in liste_dictionnaires:\r\n        for cle, valeur in dictionnaire.items():\r\n\r\n            if cle in resultat:\r\n                resultat[cle] += valeur\r\n            else:\r\n                resultat[cle] = valeur\r\n    if 'total' in resultat:\r\n        resultat = {'total': total, **resultat}\r\n    if coef != None and coef != True:\r\n        for cle, valeur in resultat.items():\r\n            if cle != '1' and cle != '🇺🇳':\r\n                resultat[cle] = round(valeur*coef)\r\n    if coef == True:\r\n        all_ = resultat['total']\r\n        for cle, valeur in resultat.items():\r\n            if cle != 'total' and cle != '1' and cle != '🇺🇳':\r\n                s = resultat[cle] / all_        \r\n                resultat[cle] = round(s*100,2)\r\n    return resultat\r\n        \r\n            \r\n\r\ndef extract_data_from_string(data_string):\r\n    data_string = data_string[:-3]\r\n    data_dict = {}\r\n    parts = data_string.split(\" | \")\r\n    first_part = parts[0]\r\n    viewer_parts = first_part.split(\" | \")\r\n    for i in range(len(viewer_parts)):\r\n        viewer_info = viewer_parts[i].split(\" : \")\r\n        country_code = str(i + 1)\r\n        viewer_count = convert_to_number(viewer_info[1])\r\n        data_dict[country_code] = viewer_count\r\n    \r\n    for i in range(1, len(parts)):\r\n        country_viewer = parts[i].split(\" : \")\r\n        country_code = country_viewer[0]\r\n        viewer_count = convert_to_number(country_viewer[1])\r\n        data_dict[country_code] = viewer_count\r\n    total_viewer_count = sum(data_dict.values()) - data_dict['1'] - data_dict['🇺🇳']\r\n    data_dict['total'] = total_viewer_count\r\n    \r\n    return data_dict\r\n\r\n\r\n\r\n\r\ndef convert_to_number(viewer_string):\r\n    # Si la chaîne se termine par une parenthèse, on l'enlève\r\n    if viewer_string[-1:] == ')':\r\n        viewer_string = viewer_string[:-1]\r\n    # On retire les éventuelles virgules\r\n    viewer_string = viewer_string.replace(',', '')\r\n    \r\n    # Détermine le nombre de décimales présentes (avant la lettre finale)\r\n    if '.' in viewer_string:\r\n        # On suppose que le dernier caractère est 'K' ou 'M'\r\n        decimals = len(viewer_string.split('.')[1][:-1])\r\n    else:\r\n        decimals = 0\r\n\r\n    numeric_part = ''.join(filter(str.isdigit, viewer_string))\r\n    \r\n    if viewer_string[-1] == 'K':\r\n        multiplier = 1000 / (10 ** decimals)\r\n        return int(float(numeric_part) * multiplier)\r\n    elif viewer_string[-1] == 'M':\r\n        multiplier = 1000000 / (10 ** decimals)\r\n        return int(float(numeric_part) * multiplier)\r\n    else:\r\n        try:\r\n            return int(numeric_part)\r\n        except ValueError:\r\n            return None\r\n\r\n################################\r\n\r\n\r\ndef build_dict_logo():\r\n    '''fonction qui lit dans le fichier excel pour créer un dictionnaire de logo\r\n    pour le site escharts elle retourne le dictionnaire'''\r\n    workbook = load_workbook(filename='C:/Users/elian/OneDrive/Documents/Liste/logo.xlsx')\r\n\r\n    sheet = workbook.active  # Ou par exemple workbook['NomDeLaFeuille']\r\n    liste_logo = {}\r\n    # Commencez à lire à partir de la première cellule de la colonne A\r\n    row = 1\r\n    while True:\r\n        cell_value = sheet[f'A{row}'].value\r\n        if cell_value is None or cell_value == '':\r\n            break  # Sortir de la boucle si la cellule est vide\r\n        logo_url = sheet[f'B{row}'].value\r\n        liste_logo[cell_value] = logo_url\r\n        row += 1  # Passer à la cellule suivante\r\n    return liste_logo\r\n\r\n\r\n\r\ndef convert_number_M_K_in_int(number:str,alea:bool=False):\r\n    #ex : 43.2M = 43200000 | 43.2M,True = 43243209\r\n    nombre_apres_la_virgule : int = 0\r\n    nbr_alea : int = 0 #ajoute du nombre aléatoire si demander\r\n    multiple = number[-1] #soit K soit M\r\n    if multiple in ['K','M']:\r\n        number = number[:-1] #l'enleve pour traiter uniquement le nombre en str\r\n\r\n    if number.find('.') != -1:\r\n        #cherche le point pour l'enlever le mettre en int puis rediviser pour ne pas fausser \r\n        nombre_apres_la_virgule = len(number) - number.find('.') - 1\r\n\r\n    number = int(number.replace('.',''))/(10**nombre_apres_la_virgule)\r\n\r\n    if multiple == 'K':\r\n\r\n        number = round(number * 1000,-2)\r\n\r\n        if alea: # si il veut ajouter de l'alea\r\n            nbr_de_0 = int(str(number).count('0'))-2 #on compte les 0 (-1 car ya tjr .0 à la fin)\r\n            #et encore -1 car on ce base sur la puissance d'en dessous pour faire ensuite *5\r\n            nbr_alea = random.randint(-(10**nbr_de_0)*5,(10**nbr_de_0)*5)\r\n    \r\n        return int(number + nbr_alea)\r\n\r\n    if multiple == 'M':\r\n        number = round(number * 1000000,-2)\r\n        if alea:\r\n            nbr_de_0 = int(str(number).count('0'))-2\r\n            nbr_alea = random.randint(-(10**nbr_de_0)*5,(10**nbr_de_0)*5)\r\n        return int(number + nbr_alea)\r\n\r\n    return int(number)\r\n\r\ndef each_match_decomposition(donnees:str,country:bool=None):\r\n    #cette fonction reçoit une ligne d'un match et renvoie la liste correspondant à ce match\r\n    #sous la forme [nom1, nom2, desc, peak]\r\n    peak : int\r\n    donnees = donnees.replace(\"\\t\", \"$\") #chaque tabulation sera desormait $$\r\n\r\n    name1 = donnees[:donnees.find('vs')-1] #on découpe les noms\r\n    name2 = donnees[donnees.find('vs')+3:donnees.find('$$')]\r\n    #on supprime les noms et on passe au suivant \r\n    donnees = donnees[donnees.find('$$')+2:]\r\n    #on découpe le desc_match ! il faut une | \r\n    description_match = donnees[donnees.find('|')+2:donnees.find('$$')]\r\n    #découpe pour passer au 'Viewers'\r\n    donnees = donnees[donnees.find('$$')+2:]\r\n    donnees = donnees[donnees.find('$$')+2:]\r\n    if country == None:\r\n        #on découpe les viewers en par exemple '3.4M\r\n        peak = donnees[:donnees.find('Viewers')-1]\r\n        #et on le convertie en INT\r\n        peak = convert_number_M_K_in_int(peak,True)\r\n    donnees = donnees[donnees.find('(')+1:]\r\n    donnees = donnees[donnees.find('|')+2:]\r\n    #on passe au 2ème '🇺🇳' (celui des viewers chinois)\r\n    if country == '🇺🇳':\r\n        #on découpe le 2ème '🇺🇳'\r\n        donnees = donnees[donnees.find(':')+1:donnees.find(')')]\r\n        peak = convert_number_M_K_in_int(donnees,True)\r\n\r\n    if country != None and '🇺🇳':\r\n        #si c'est un pays spécifique on cherche si le drapeau est présent\r\n        if donnees.find(country) != -1:\r\n            #on découpe le chiffre du pays\r\n            donnees = donnees[donnees.find(country)+5:]\r\n            donnees = donnees[:donnees.find('|')-1]\r\n            peak = int(donnees.replace(' ',''))\r\n    \r\n    return [name1,name2,description_match,peak]\r\n\r\n\r\ndef modif_pr_escharts(data:str,desc:bool,limit_VBox:int=-1,country:str=None):\r\n    #desc = si c'est en des decrescendo ou non\r\n\r\n\r\n    tempBackgroundColor = \"\"\r\n    tempGras = \"\"\r\n    black = 'px-6 py-2  matches-data min-w-max'\r\n    grey = 'px-6 py-2  bg-row  matches-data min-w-max'\r\n    gras = 'text-sm font-bold text-secondary'\r\n    no_gras = 'text-sm text-secondary'\r\n    data = data.replace(\"\\n\", \"ù\")\r\n    stringBuilder = \"\"\r\n    logo_dic = build_dict_logo()\r\n    hbox = []\r\n    liste_match_str = []\r\n    #compte le nombre de match\r\n    while data.find('ù') != -1:\r\n        \r\n        liste_match_str.append(data[:data.find(\"ù\")])\r\n        data = data[data.find(\"ù\")+1:]\r\n    liste_match_str.append(data)\r\n\r\n    count_v = len(liste_match_str) #nbr de match à 'transformer'\r\n    #découpe le str pour crée un début de liste\r\n    for j in range(count_v):\r\n        vbox = each_match_decomposition(liste_match_str[j],country)\r\n        hbox.append(vbox)\r\n    print(hbox)\r\n    #trie si demandé les matchs\r\n    if desc:\r\n        hbox.sort(key=lambda x: int(x[3]), reverse=desc)\r\n    \r\n    max_audience = int(max(hbox, key=lambda x: int(x[3]))[3])\r\n\r\n    #ajoute à liste le % modifie le format de l'audience et ajoute les 2 logos\r\n    for i in range(count_v):\r\n        logo1 = None\r\n        logo2 = None\r\n        hbox[i].append(int(hbox[i][3])/max_audience)\r\n        hbox[i][3] = str(ajouter_espaces(hbox[i][3]))\r\n        for x in logo_dic:\r\n            if x == hbox[i][0]:\r\n                logo1 = logo_dic[x]\r\n            elif x == hbox[i][1]:\r\n                logo2 = logo_dic[x]\r\n        if logo1 == None:\r\n            print(hbox[i][0])\r\n        elif logo2 == None:\r\n            print(hbox[i][1])   \r\n        else:\r\n            hbox[i].append(logo1)\r\n            hbox[i].append(logo2)\r\n\r\n    if limit_VBox != -1 and limit_VBox < count_v:\r\n        count_v = limit_VBox\r\n    #crée le html\r\n    stringBuilder += '<div class=\"max-w-full overflow-x-auto\">' #la div qui englobe les matches\r\n    for i in range(count_v):\r\n        if i%2 == 0:\r\n            tempBackgroundColor = black\r\n        else:\r\n            tempBackgroundColor = grey\r\n        if hbox[i][4] == 1:\r\n            tempGras = gras\r\n        else :\r\n            tempGras = no_gras\r\n        htmlVboxConstructor = (\r\n        '<div class=\"' + tempBackgroundColor + '\">'\r\n        '<div class=\"flex items-center justify-between\">'\r\n        '<div class=\"flex flex-col\">'\r\n        '<div class=\"flex items-start justify-between mb-2 md:min-w-50\">'\r\n        '<a href=\"https://escharts.com/teams/csgo/big\" title=\"BIG | CS:GO\" class=\"flex items-center md:min-w-20 hover:text-primary transition duration-200\">'\r\n        '<img src=\"' + hbox[i][5] + '\" alt=\"BIG\" class=\"object-contain w-5 h-5 mr-3\">'\r\n        '<span class=\"text-sm font-bold\">' + hbox[i][0] + '</span></a>'\r\n        '<div class=\"mx-4 text-sm text-secondary\">vs</div>'\r\n        '<a href=\"https://escharts.com/teams/csgo/navi\" title=\"NAVI | CS:GO\" class=\"flex items-center md:min-w-20 hover:text-primary transition duration-200\">'\r\n        '<img src=\"' + hbox[i][6] + '\" alt=\"NAVI\" class=\"object-contain w-5 h-5 mr-3\">'\r\n        '<span class=\"text-sm font-bold\">' + hbox[i][1] + '</span></a>'\r\n        '</div>'\r\n        '<div class=\"flex items-center text-xs text-secondary whitespace-nowrap max-w-max\" data-tippy-content=\"18 Jul, 2023, 19:25\">' + hbox[i][2] + '</div>'\r\n        '</div>'\r\n        '<div class=\"flex flex-col min-w-20\">'\r\n        '<div class=\"flex flex-row-reverse items-center justify-between mb-2 whitespace-nowrap \">'\r\n        '<span class=\"' + tempGras + '\">' + str(hbox[i][3]) + '</span>'\r\n        '</div>'\r\n        '<div class=\"relative h-px min-w-full rounded bg-gray-dark\">'\r\n        '<div class=\"absolute top-0 max-w-full h-full rounded progress-rose right-0 \" style=\"width: ' + str(hbox[i][4] * 100) + '%\"></div>'\r\n        '</div>'\r\n        '</div>'\r\n        '</div>'\r\n        '</div>'\r\n        )\r\n        stringBuilder += htmlVboxConstructor\r\n    stringBuilder += '</div>' #la div qui englobe les matches\r\n    pyperclip.copy(stringBuilder)\r\n\r\n\r\n\r\n\r\n            \r\n\r\nescharts_str = \"\"\"PSG vs PNG\t\tSwiss Stage | Opening Matches\t\tValence | 🇪🇸\t\t94.4M Viewers\t\t61 900\t(🇺🇳 : 1.14M | 🇺🇳 : 2.06M) | 🇧🇷 : 28 230 984 | 🇨🇳 : 12 009 558 | 🇺🇸 : 6 081 085 | 🇩🇪 : 5 831 676 | 🇹🇼 : 4 504 764 | 🇻🇳 : 3 823 621 | 🇳🇬 : 2 158 254 | 🇬🇧 : 2 130 317 | 🇮🇳 : 2 053 866 | 🇰🇷 : 2 020 468 | 🇲🇽 : 1 822 984 | 🇪🇸 : 1 460 997 | 🇫🇷 : 1 297 172 | 🇮🇹 : 1 195 452 | 🇯🇵 : 977 393 | 🇮🇷 : 942 813 | 🇹🇷 : 856 072 | 🇪🇬 : 853 238 | 🇵🇱 : 841 957 | 🇦🇷 : 734 583 | 🇨🇦 : 718 068 | 🇭🇰 : 670 760 | 🇨🇴 : 630 640 | 🇩🇿 : 629 348 | 🇦🇹 : 610 291 | 🇨🇿 : 592 237 | 🇷🇸 : 568 557 | 🇿🇦 : 442 530 | 🇨🇭 : 441 230 | 🇦🇺 : 440 623 | 🇻🇪 : 397 618 | 🇵🇪 : 387 235 | 🇳🇱 : 381 491 | 🇮🇶 : 366 251 | 🇵🇹 : 347 850 | 🇸🇰 : 347 153 | 🇲🇦 : 322 699 | 🇸🇦 : 306 729 | 🇭🇺 : 303 516 | 🇭🇷 : 271 820 | 🇬🇭 : 234 193 | 🇧🇦 : 233 247 | 🇨🇩 : 231 264 | 🇬🇹 : 224 681 | 🇨🇱 : 214 468 | 🇸🇪 : 210 398 | 🇪🇨 : 203 631 | 🇸🇩 : 186 931 | 🇧🇪 : 171 055 | 🇷🇴 : 155 679 | 🇨🇺 : 154 610 | 🇵🇰 : 153 536 | 🇿🇼 : 148 852 | 🇩🇰 : 144 986 | 🇱🇰 : 144 143 | 🇩🇴 : 134 411 | 🇳🇴 : 132 976 | 🇧🇴 : 125 276 | 🇧🇩 : 124 081 | 🇦🇪 : 118 589 | 🇸🇮 : 113 560 | 🇮🇪 : 113 484 | 🇰🇪 : 103 462 | 🇭🇳 : 97 583 | 🇨🇲 : 97 139 | 🇲🇰 : 97 078 | 🇵🇾 : 84 255 | 🇸🇻 : 81 135 | 🇹🇳 : 79 229 | 🇯🇴 : 77 898 | 🇱🇾 : 77 650 | 🇳🇮 : 75 733 | 🇳🇿 : 73 697 | 🇴🇲 : 68 177 | 🇰🇼 : 68 060 | 🇸🇾 : 62 012 | 🇨🇷 : 58 666 | 🇸🇬 : 58 235 | 🇵🇦 : 56 533 | 🇺🇾 : 51 063 | 🇱🇧 : 49 375 | 🇲🇪 : 33 373 | 🇶🇦 : 32 483 | 🇾🇪 : 26 788 | \r\nGAM vs SHG\t\tSwiss Stage | Opening Matches\t\tSeville | 🇪🇸\t\t93.7M Viewers\t\t67 100\t(🇺🇳 : 1.19M | 🇺🇳 : 2.14M) | 🇻🇳 : 29 955 099 | 🇯🇵 : 14 775 110 | 🇨🇳 : 12 466 379 | 🇩🇪 : 4 744 116 | 🇺🇸 : 4 549 137 | 🇧🇷 : 3 015 462 | 🇰🇷 : 1 911 447 | 🇳🇬 : 1 769 317 | 🇮🇹 : 1 686 658 | 🇬🇧 : 1 623 606 | 🇮🇳 : 1 436 091 | 🇲🇽 : 1 133 944 | 🇹🇼 : 1 095 600 | 🇫🇷 : 1 082 012 | 🇪🇬 : 1 081 813 | 🇪🇸 : 1 053 198 | 🇮🇷 : 951 124 | 🇵🇱 : 650 996 | 🇸🇦 : 604 562 | 🇨🇦 : 529 450 | 🇦🇹 : 516 336 | 🇦🇷 : 462 549 | 🇨🇴 : 462 471 | 🇩🇿 : 431 813 | 🇮🇶 : 419 513 | 🇨🇭 : 383 204 | 🇭🇰 : 368 300 | 🇹🇷 : 366 963 | 🇿🇦 : 312 689 | 🇻🇪 : 310 381 | 🇦🇺 : 299 132 | 🇳🇱 : 277 488 | 🇲🇦 : 271 553 | 🇵🇪 : 263 299 | 🇸🇪 : 181 628 | 🇨🇱 : 178 575 | 🇬🇹 : 170 072 | 🇵🇹 : 162 158 | 🇬🇭 : 158 036 | 🇨🇩 : 151 686 | 🇪🇨 : 141 440 | 🇦🇪 : 140 217 | 🇧🇪 : 134 756 | 🇸🇩 : 132 084 | 🇿🇼 : 114 774 | 🇵🇰 : 111 490 | 🇨🇺 : 107 270 | 🇷🇴 : 107 247 | 🇳🇴 : 106 382 | 🇱🇰 : 104 760 | 🇩🇰 : 95 042 | 🇮🇪 : 94 946 | 🇧🇴 : 93 617 | 🇧🇩 : 90 814 | 🇩🇴 : 89 716 | 🇹🇳 : 85 444 | 🇱🇾 : 77 482 | 🇯🇴 : 72 887 | 🇰🇼 : 72 001 | 🇵🇾 : 70 798 | 🇰🇪 : 68 975 | 🇴🇲 : 68 129 | 🇨🇿 : 67 462 | 🇭🇳 : 67 088 | 🇸🇾 : 66 982 | 🇨🇲 : 60 783 | 🇳🇮 : 59 821 | 🇱🇧 : 59 393 | 🇳🇿 : 56 791 | 🇸🇻 : 50 202 | 🇸🇬 : 50 128 | 🇨🇷 : 45 482 | 🇺🇾 : 36 159 | 🇵🇦 : 35 933 | 🇶🇦 : 34 034 | 🇾🇪 : 28 607 | \r\n100T vs R7\t\tSwiss Stage | Opening Matches\t\tBarcelone | 🇪🇸\t\t107.4M Viewers\t\t78 100\t(🇺🇳 : 1.15M | 🇺🇳 : 1.86M) | 🇺🇸 : 40 671 440 | 🇨🇳 : 9 349 784 | 🇻🇳 : 8 780 166 | 🇦🇷 : 5 430 643 | 🇩🇪 : 4 584 483 | 🇧🇷 : 4 284 775 | 🇬🇧 : 2 286 062 | 🇲🇽 : 2 282 526 | 🇳🇬 : 2 157 010 | 🇮🇳 : 1 883 437 | 🇪🇸 : 1 827 882 | 🇮🇹 : 1 796 401 | 🇰🇷 : 1 643 610 | 🇯🇵 : 1 303 345 | 🇫🇷 : 1 210 681 | 🇹🇼 : 1 188 976 | 🇨🇴 : 857 369 | 🇪🇬 : 843 254 | 🇮🇷 : 820 652 | 🇵🇱 : 780 332 | 🇨🇦 : 725 882 | 🇩🇿 : 568 628 | 🇻🇪 : 522 958 | 🇵🇪 : 509 591 | 🇸🇦 : 472 033 | 🇦🇹 : 442 507 | 🇹🇷 : 413 658 | 🇮🇶 : 410 981 | 🇭🇰 : 405 806 | 🇿🇦 : 402 051 | 🇨🇿 : 393 517 | 🇦🇺 : 383 284 | 🇨🇭 : 370 633 | 🇷🇸 : 368 602 | 🇳🇱 : 361 345 | 🇲🇦 : 304 331 | 🇬🇹 : 295 415 | 🇨🇱 : 288 473 | 🇪🇨 : 267 793 | 🇬🇭 : 251 651 | 🇭🇺 : 251 091 | 🇸🇪 : 248 584 | 🇵🇹 : 200 457 | 🇨🇩 : 195 046 | 🇸🇰 : 190 447 | 🇸🇩 : 180 672 | 🇨🇺 : 179 095 | 🇧🇪 : 175 100 | 🇩🇴 : 174 959 | 🇿🇼 : 169 647 | 🇵🇰 : 161 838 | 🇧🇴 : 159 524 | 🇩🇰 : 157 108 | 🇭🇷 : 150 116 | 🇷🇴 : 149 633 | 🇭🇳 : 145 167 | 🇧🇩 : 142 191 | 🇧🇦 : 137 308 | 🇱🇰 : 136 133 | 🇦🇪 : 134 845 | 🇳🇴 : 134 683 | 🇮🇪 : 132 470 | 🇹🇭 : 115 683 | 🇵🇾 : 113 328 | 🇰🇪 : 109 067 | 🇳🇮 : 105 921 | 🇨🇲 : 99 554 | 🇸🇻 : 87 369 | 🇳🇿 : 84 621 | 🇹🇳 : 82 178 | 🇨🇷 : 82 051 | 🇸🇮 : 80 715 | 🇱🇾 : 78 934 | 🇯🇴 : 73 968 | 🇲🇰 : 68 667 | 🇸🇬 : 67 978 | 🇴🇲 : 67 380 | 🇰🇼 : 66 598 | 🇺🇾 : 66 468 | 🇵🇦 : 65 257 | 🇸🇾 : 60 023 | 🇱🇧 : 52 950 | 🇶🇦 : 32 745 | 🇾🇪 : 23 879 | 🇲🇪 : 21 035 | \r\nPNG vs Vikings\t\tSwiss Stage | Lower Semis\t\tBilbao | 🇪🇸\t\t91.6M Viewers\t\t55 700\t(🇺🇳 : 1.24M | 🇺🇳 : 2.34M) | 🇻🇳 : 26 072 585 | 🇨🇳 : 14 359 112 | 🇧🇷 : 12 447 067 | 🇩🇪 : 4 586 621 | 🇺🇸 : 4 473 937 | 🇹🇼 : 3 757 063 | 🇳🇬 : 1 759 316 | 🇮🇹 : 1 594 659 | 🇬🇧 : 1 525 561 | 🇰🇷 : 1 425 646 | 🇮🇳 : 1 343 531 | 🇲🇽 : 1 172 601 | 🇮🇷 : 1 013 828 | 🇪🇬 : 981 860 | 🇫🇷 : 942 939 | 🇯🇵 : 901 675 | 🇪🇸 : 878 174 | 🇹🇷 : 652 936 | 🇸🇦 : 647 996 | 🇵🇱 : 647 659 | 🇵🇹 : 561 521 | 🇩🇿 : 538 597 | 🇨🇦 : 526 827 | 🇦🇹 : 470 674 | 🇨🇴 : 451 345 | 🇮🇶 : 442 990 | 🇦🇷 : 394 983 | 🇭🇰 : 389 359 | 🇨🇭 : 348 414 | 🇦🇺 : 276 545 | 🇿🇦 : 274 724 | 🇵🇪 : 274 096 | 🇨🇿 : 253 553 | 🇲🇦 : 253 090 | 🇻🇪 : 251 246 | 🇳🇱 : 236 831 | 🇭🇺 : 227 637 | 🇷🇸 : 219 816 | 🇬🇭 : 167 473 | 🇸🇪 : 160 127 | 🇨🇩 : 148 713 | 🇦🇪 : 145 271 | 🇨🇱 : 141 572 | 🇬🇹 : 139 088 | 🇧🇪 : 135 396 | 🇸🇩 : 131 350 | 🇸🇰 : 126 929 | 🇿🇼 : 119 742 | 🇪🇨 : 118 154 | 🇷🇴 : 113 565 | 🇩🇰 : 109 874 | 🇱🇰 : 108 224 | 🇧🇩 : 107 319 | 🇳🇴 : 102 823 | 🇵🇰 : 100 922 | 🇮🇪 : 97 098 | 🇨🇺 : 96 687 | 🇧🇦 : 87 703 | 🇭🇷 : 86 939 | 🇧🇴 : 81 750 | 🇩🇴 : 81 608 | 🇯🇴 : 81 149 | 🇹🇳 : 80 774 | 🇱🇾 : 80 198 | 🇹🇭 : 78 658 | 🇰🇪 : 77 737 | 🇰🇼 : 75 293 | 🇸🇾 : 68 630 | 🇴🇲 : 67 146 | 🇭🇳 : 63 707 | 🇨🇲 : 63 111 | 🇱🇧 : 58 114 | 🇳🇿 : 57 556 | 🇵🇾 : 56 788 | 🇸🇻 : 50 738 | 🇳🇮 : 49 376 | 🇸🇬 : 49 365 | 🇸🇮 : 43 246 | 🇨🇷 : 42 932 | 🇲🇰 : 42 195 | 🇶🇦 : 38 785 | 🇵🇦 : 34 019 | 🇾🇪 : 30 783 | 🇺🇾 : 29 378 | 🇲🇪 : 14 752 | \r\nSHG vs 100T\t\tSwiss Stage | Lower Semis\t\tMalaga | 🇪🇸\t\t94.7M Viewers\t\t51 900\t(🇺🇳 : 917.7K | 🇺🇳 : 1.67M) | 🇺🇸 : 34 173 544 | 🇯🇵 : 12 243 092 | 🇨🇳 : 9 869 435 | 🇻🇳 : 5 655 979 | 🇧🇷 : 5 036 901 | 🇩🇪 : 3 418 219 | 🇳🇬 : 1 771 841 | 🇬🇧 : 1 594 400 | 🇮🇳 : 1 355 514 | 🇰🇷 : 1 323 374 | 🇫🇷 : 1 142 337 | 🇲🇽 : 1 125 614 | 🇹🇼 : 1 119 028 | 🇮🇹 : 950 476 | 🇪🇸 : 938 012 | 🇮🇷 : 765 022 | 🇪🇬 : 727 623 | 🇹🇷 : 626 819 | 🇵🇱 : 582 893 | 🇨🇦 : 537 819 | 🇸🇦 : 486 204 | 🇦🇷 : 476 252 | 🇩🇿 : 427 711 | 🇨🇴 : 422 491 | 🇭🇰 : 375 012 | 🇦🇹 : 369 385 | 🇮🇶 : 331 294 | 🇨🇭 : 316 897 | 🇿🇦 : 307 256 | 🇨🇿 : 286 068 | 🇦🇺 : 282 170 | 🇵🇪 : 273 127 | 🇻🇪 : 271 214 | 🇳🇱 : 264 876 | 🇲🇦 : 256 313 | 🇵🇹 : 249 951 | 🇭🇺 : 242 123 | 🇷🇸 : 204 047 | 🇨🇩 : 190 554 | 🇸🇪 : 180 106 | 🇬🇭 : 175 512 | 🇬🇹 : 155 967 | 🇨🇱 : 151 406 | 🇪🇨 : 140 186 | 🇸🇩 : 138 609 | 🇧🇪 : 134 705 | 🇿🇼 : 117 214 | 🇷🇺 : 114 726 | 🇷🇴 : 109 971 | 🇦🇪 : 109 706 | 🇱🇰 : 108 937 | 🇩🇰 : 106 558 | 🇸🇰 : 105 986 | 🇳🇴 : 101 602 | 🇵🇰 : 100 818 | 🇧🇩 : 95 243 | 🇧🇴 : 91 814 | 🇮🇪 : 89 725 | 🇨🇺 : 89 203 | 🇭🇷 : 84 420 | 🇩🇴 : 79 528 | 🇧🇦 : 77 338 | 🇹🇭 : 77 227 | 🇰🇪 : 76 068 | 🇭🇳 : 71 608 | 🇹🇳 : 69 380 | 🇨🇲 : 65 576 | 🇱🇾 : 64 812 | 🇯🇴 : 60 178 | 🇵🇾 : 60 087 | 🇰🇼 : 53 098 | 🇳🇿 : 51 507 | 🇴🇲 : 50 292 | 🇸🇻 : 48 776 | 🇳🇮 : 48 055 | 🇸🇾 : 47 291 | 🇸🇬 : 43 764 | 🇲🇰 : 42 210 | 🇸🇮 : 41 584 | 🇱🇧 : 40 967 | 🇨🇷 : 40 058 | 🇺🇾 : 33 768 | 🇵🇦 : 31 465 | 🇶🇦 : 26 379 | 🇾🇪 : 21 539 | 🇲🇪 : 14 484 | 🇰🇿 : 13 356 | 🇺🇦 : 9 228 | 🇧🇾 : 5 642 | 🇦🇿 : 5 528 | 🇺🇿 : 3 960 | 🇦🇲 : 2 529 | 🇰🇬 : 2 343 | \r\nPNG vs R7\t\tSwiss Stage | Lower Final\t\tMadrid | 🇪🇸\t\t117.4M Viewers\t\t98 300\t(🇺🇳 : 1.39M | 🇺🇳 : 2.62M) | 🇧🇷 : 43 578 035 | 🇨🇳 : 16 152 365 | 🇦🇷 : 6 336 395 | 🇺🇸 : 5 869 056 | 🇩🇪 : 5 158 789 | 🇻🇳 : 5 072 413 | 🇲🇽 : 2 375 036 | 🇳🇬 : 2 283 005 | 🇮🇳 : 1 963 680 | 🇬🇧 : 1 922 562 | 🇹🇼 : 1 901 689 | 🇪🇸 : 1 775 639 | 🇰🇷 : 1 678 957 | 🇫🇷 : 1 480 807 | 🇪🇬 : 1 151 665 | 🇹🇷 : 1 004 598 | 🇮🇹 : 964 914 | 🇮🇷 : 954 348 | 🇵🇹 : 894 140 | 🇨🇴 : 886 208 | 🇵🇱 : 824 294 | 🇯🇵 : 808 215 | 🇸🇦 : 719 825 | 🇨🇦 : 713 319 | 🇩🇿 : 690 851 | 🇦🇹 : 586 314 | 🇵🇪 : 576 625 | 🇭🇰 : 551 398 | 🇻🇪 : 507 796 | 🇮🇶 : 434 966 | 🇨🇭 : 420 686 | 🇨🇿 : 413 666 | 🇿🇦 : 411 346 | 🇦🇺 : 401 771 | 🇷🇸 : 357 378 | 🇳🇱 : 307 327 | 🇲🇦 : 301 409 | 🇪🇨 : 298 014 | 🇨🇱 : 276 780 | 🇬🇹 : 263 600 | 🇭🇺 : 251 091 | 🇸🇰 : 235 721 | 🇬🇭 : 230 495 | 🇨🇩 : 215 748 | 🇧🇪 : 204 569 | 🇸🇪 : 201 159 | 🇨🇺 : 195 869 | 🇧🇴 : 189 792 | 🇭🇷 : 182 939 | 🇩🇴 : 180 199 | 🇸🇩 : 168 793 | 🇵🇰 : 158 307 | 🇷🇴 : 151 790 | 🇦🇪 : 148 509 | 🇿🇼 : 145 220 | 🇧🇦 : 140 828 | 🇱🇰 : 136 501 | 🇭🇳 : 128 702 | 🇧🇩 : 125 080 | 🇳🇴 : 124 619 | 🇵🇾 : 123 233 | 🇩🇰 : 122 777 | 🇮🇪 : 116 667 | 🇰🇪 : 96 960 | 🇳🇮 : 96 697 | 🇹🇳 : 95 206 | 🇸🇻 : 90 429 | 🇨🇷 : 88 598 | 🇨🇲 : 87 807 | 🇯🇴 : 86 135 | 🇱🇾 : 81 594 | 🇰🇼 : 79 306 | 🇴🇲 : 78 213 | 🇸🇾 : 74 455 | 🇸🇮 : 72 485 | 🇳🇿 : 69 756 | 🇲🇰 : 69 752 | 🇱🇧 : 69 545 | 🇺🇾 : 62 605 | 🇵🇦 : 61 946 | 🇸🇬 : 55 079 | 🇶🇦 : 41 017 | 🇾🇪 : 32 197 | 🇲🇪 : 26 894 | \r\nBLG vs KOI\t\tSwiss Stage | Round 1\t\tBarcelone | 🇪🇸\t\t144.8M Viewers\t\t89 000\t(🇺🇳 : 1.70M | 🇺🇳 : 4.40M) | 🇨🇳 : 54 328 142 | 🇻🇳 : 14 290 301 | 🇪🇸 : 8 732 542 | 🇺🇸 : 7 862 981 | 🇧🇷 : 5 238 129 | 🇩🇪 : 5 167 425 | 🇰🇷 : 3 685 131 | 🇫🇷 : 3 040 590 | 🇳🇬 : 2 806 150 | 🇬🇧 : 2 663 828 | 🇲🇽 : 2 440 837 | 🇮🇳 : 2 321 286 | 🇮🇹 : 2 251 466 | 🇹🇼 : 1 930 451 | 🇯🇵 : 1 409 943 | 🇮🇷 : 1 408 867 | 🇩🇿 : 1 408 401 | 🇪🇬 : 1 376 276 | 🇵🇱 : 1 318 871 | 🇹🇷 : 1 300 069 | 🇨🇦 : 1 164 023 | 🇦🇷 : 1 064 669 | 🇨🇴 : 1 005 420 | 🇸🇦 : 685 732 | 🇭🇰 : 657 030 | 🇲🇦 : 655 359 | 🇵🇪 : 622 914 | 🇨🇭 : 613 349 | 🇮🇶 : 603 133 | 🇦🇹 : 598 306 | 🇻🇪 : 582 291 | 🇿🇦 : 558 776 | 🇨🇩 : 558 584 | 🇦🇺 : 477 636 | 🇳🇱 : 454 437 | 🇧🇪 : 427 393 | 🇨🇿 : 383 175 | 🇵🇹 : 327 193 | 🇨🇱 : 324 655 | 🇬🇹 : 315 774 | 🇬🇭 : 310 153 | 🇸🇪 : 291 500 | 🇪🇨 : 273 835 | 🇷🇸 : 259 386 | 🇭🇺 : 251 091 | 🇸🇩 : 224 901 | 🇧🇴 : 213 147 | 🇨🇺 : 211 749 | 🇵🇰 : 201 398 | 🇩🇴 : 196 701 | 🇿🇼 : 191 499 | 🇦🇪 : 191 409 | 🇷🇴 : 180 452 | 🇱🇰 : 180 143 | 🇩🇰 : 175 867 | 🇮🇪 : 171 116 | 🇳🇴 : 171 074 | 🇧🇩 : 170 042 | 🇭🇳 : 167 853 | 🇵🇾 : 149 252 | 🇸🇰 : 146 575 | 🇰🇪 : 129 151 | 🇹🇳 : 119 003 | 🇯🇴 : 118 296 | 🇨🇲 : 114 745 | 🇭🇷 : 113 278 | 🇱🇾 : 111 007 | 🇳🇮 : 109 764 | 🇧🇦 : 108 448 | 🇸🇻 : 107 971 | 🇴🇲 : 103 877 | 🇰🇼 : 103 303 | 🇨🇷 : 97 692 | 🇸🇾 : 96 984 | 🇳🇿 : 93 864 | 🇱🇧 : 76 329 | 🇸🇬 : 75 725 | 🇵🇦 : 74 206 | 🇺🇾 : 71 049 | 🇸🇮 : 60 096 | 🇶🇦 : 53 428 | 🇲🇰 : 47 696 | 🇾🇪 : 39 842 | 🇲🇪 : 15 540 | \r\nT1 vs TES\t\tSwiss Stage | Round 1\t\tValence | 🇪🇸\t\t196.3M Viewers\t\t62 300\t(🇺🇳 : 2.81M | 🇺🇳 : 6.23M) | 🇨🇳 : 70 042 111 | 🇻🇳 : 25 152 860 | 🇰🇷 : 13 394 450 | 🇺🇸 : 10 749 702 | 🇧🇷 : 8 622 843 | 🇩🇪 : 6 503 448 | 🇮🇹 : 4 249 664 | 🇳🇬 : 4 151 017 | 🇬🇧 : 3 881 796 | 🇮🇳 : 3 674 444 | 🇫🇷 : 3 580 516 | 🇹🇼 : 3 352 398 | 🇪🇬 : 2 815 724 | 🇲🇽 : 2 462 913 | 🇮🇷 : 2 163 568 | 🇪🇸 : 1 972 729 | 🇹🇷 : 1 897 472 | 🇯🇵 : 1 814 953 | 🇩🇿 : 1 704 211 | 🇨🇦 : 1 503 900 | 🇵🇱 : 1 257 049 | 🇨🇴 : 1 023 254 | 🇸🇦 : 995 389 | 🇦🇷 : 983 445 | 🇮🇶 : 934 811 | 🇭🇰 : 900 348 | 🇲🇦 : 853 410 | 🇨🇭 : 790 884 | 🇿🇦 : 726 271 | 🇦🇺 : 679 752 | 🇦🇹 : 673 114 | 🇨🇩 : 595 382 | 🇵🇪 : 591 818 | 🇳🇱 : 588 530 | 🇻🇪 : 558 755 | 🇧🇪 : 508 080 | 🇨🇿 : 492 205 | 🇵🇹 : 471 289 | 🇬🇭 : 443 589 | 🇸🇪 : 422 102 | 🇷🇸 : 386 606 | 🇨🇱 : 357 932 | 🇭🇺 : 325 935 | 🇬🇹 : 325 105 | 🇸🇩 : 312 922 | 🇪🇨 : 309 481 | 🇦🇪 : 302 686 | 🇵🇰 : 282 810 | 🇿🇼 : 261 144 | 🇷🇴 : 256 813 | 🇳🇴 : 254 365 | 🇩🇰 : 239 851 | 🇧🇩 : 239 054 | 🇸🇰 : 236 184 | 🇱🇰 : 228 724 | 🇯🇴 : 210 523 | 🇨🇺 : 201 218 | 🇮🇪 : 196 821 | 🇱🇾 : 188 754 | 🇩🇴 : 188 750 | 🇹🇳 : 188 207 | 🇧🇴 : 185 594 | 🇸🇾 : 179 493 | 🇰🇪 : 177 936 | 🇰🇼 : 168 556 | 🇧🇦 : 167 784 | 🇨🇲 : 167 480 | 🇭🇷 : 166 887 | 🇴🇲 : 159 647 | 🇭🇳 : 149 138 | 🇬🇷 : 143 571 | 🇱🇧 : 132 728 | 🇳🇿 : 120 176 | 🇸🇬 : 119 868 | 🇵🇾 : 117 180 | 🇳🇮 : 109 810 | 🇸🇻 : 104 633 | 🇨🇷 : 88 536 | 🇸🇮 : 85 417 | 🇲🇰 : 75 517 | 🇶🇦 : 75 448 | 🇵🇦 : 74 174 | 🇺🇾 : 73 858 | 🇾🇪 : 72 397 | 🇲🇪 : 23 896 | \r\nG2 vs PNG\t\tSwiss Stage | Round 1\t\tMadrid | 🇪🇸\t\t128.6M Viewers\t\t95 600\t(🇺🇳 : 1.49M | 🇺🇳 : 2.25M) | 🇧🇷 : 43 387 116 | 🇩🇪 : 16 843 412 | 🇨🇳 : 9 987 240 | 🇺🇸 : 8 006 226 | 🇫🇷 : 3 711 799 | 🇻🇳 : 3 168 327 | 🇳🇬 : 3 048 816 | 🇮🇹 : 2 632 555 | 🇬🇧 : 2 617 553 | 🇲🇽 : 2 507 634 | 🇮🇳 : 2 296 491 | 🇪🇸 : 2 030 096 | 🇰🇷 : 1 888 444 | 🇵🇱 : 1 753 490 | 🇩🇿 : 1 607 309 | 🇨🇦 : 1 345 621 | 🇮🇷 : 1 162 612 | 🇪🇬 : 918 002 | 🇨🇴 : 901 660 | 🇵🇹 : 884 929 | 🇦🇷 : 883 408 | 🇸🇦 : 772 328 | 🇲🇦 : 745 875 | 🇨🇭 : 744 432 | 🇹🇷 : 705 699 | 🇹🇼 : 701 796 | 🇦🇹 : 670 891 | 🇿🇦 : 581 806 | 🇨🇿 : 575 758 | 🇨🇩 : 560 487 | 🇻🇪 : 560 157 | 🇧🇪 : 520 710 | 🇵🇪 : 514 042 | 🇯🇵 : 484 870 | 🇦🇺 : 482 748 | 🇳🇱 : 464 404 | 🇮🇶 : 449 904 | 🇷🇸 : 446 441 | 🇭🇺 : 350 596 | 🇨🇱 : 341 056 | 🇸🇪 : 331 331 | 🇬🇭 : 326 012 | 🇬🇹 : 289 055 | 🇪🇨 : 267 376 | 🇸🇰 : 262 286 | 🇸🇩 : 245 762 | 🇭🇷 : 235 442 | 🇭🇰 : 232 812 | 🇿🇼 : 203 687 | 🇵🇰 : 199 878 | 🇱🇰 : 189 508 | 🇧🇩 : 184 410 | 🇳🇴 : 183 482 | 🇨🇺 : 182 522 | 🇷🇴 : 182 384 | 🇧🇴 : 182 373 | 🇧🇦 : 177 681 | 🇩🇴 : 174 774 | 🇩🇰 : 163 385 | 🇦🇪 : 158 460 | 🇮🇪 : 144 387 | 🇭🇳 : 129 538 | 🇵🇾 : 121 694 | 🇰🇪 : 121 209 | 🇨🇲 : 111 457 | 🇸🇮 : 110 899 | 🇳🇿 : 102 705 | 🇹🇳 : 102 454 | 🇳🇮 : 100 499 | 🇲🇰 : 97 184 | 🇯🇴 : 89 093 | 🇨🇷 : 87 685 | 🇱🇾 : 87 209 | 🇸🇻 : 87 163 | 🇴🇲 : 85 658 | 🇸🇾 : 85 119 | 🇸🇬 : 83 972 | 🇰🇼 : 82 884 | 🇺🇾 : 73 753 | 🇱🇧 : 73 266 | 🇵🇦 : 67 227 | 🇶🇦 : 42 014 | 🇾🇪 : 33 968 | 🇲🇪 : 28 678 | \r\nWBG vs Fnatic\t\tSwiss Stage | Round 4\t\tSeville | 🇪🇸\t\t162.0M Viewers\t\t65 500\t(🇺🇳 : 1.77M | 🇺🇳 : 5.04M) | 🇨🇳 : 62 416 256 | 🇻🇳 : 16 328 691 | 🇬🇧 : 12 238 669 | 🇺🇸 : 9 027 976 | 🇩🇪 : 6 997 174 | 🇰🇷 : 5 092 398 | 🇳🇬 : 3 416 110 | 🇧🇷 : 3 286 417 | 🇫🇷 : 3 150 686 | 🇮🇹 : 2 616 938 | 🇮🇳 : 2 570 324 | 🇲🇽 : 2 252 772 | 🇹🇼 : 1 864 411 | 🇪🇸 : 1 717 800 | 🇵🇱 : 1 553 991 | 🇹🇷 : 1 453 739 | 🇪🇬 : 1 435 665 | 🇮🇷 : 1 396 738 | 🇩🇿 : 1 359 687 | 🇨🇦 : 1 259 278 | 🇯🇵 : 1 222 783 | 🇸🇦 : 1 035 296 | 🇦🇷 : 916 253 | 🇨🇴 : 796 638 | 🇦🇹 : 790 843 | 🇨🇿 : 739 836 | 🇨🇭 : 700 068 | 🇮🇶 : 693 878 | 🇷🇸 : 690 749 | 🇦🇺 : 643 437 | 🇿🇦 : 627 933 | 🇲🇦 : 610 141 | 🇭🇰 : 601 288 | 🇨🇩 : 521 748 | 🇵🇪 : 504 822 | 🇻🇪 : 486 242 | 🇳🇱 : 472 999 | 🇧🇪 : 423 784 | 🇬🇭 : 372 356 | 🇸🇪 : 364 639 | 🇸🇰 : 356 892 | 🇭🇺 : 350 596 | 🇨🇱 : 309 204 | 🇭🇷 : 308 834 | 🇧🇦 : 280 703 | 🇬🇹 : 269 238 | 🇸🇩 : 239 495 | 🇦🇪 : 238 423 | 🇵🇰 : 237 395 | 🇪🇨 : 236 074 | 🇷🇴 : 231 626 | 🇿🇼 : 221 469 | 🇩🇰 : 211 607 | 🇱🇰 : 204 249 | 🇳🇴 : 201 765 | 🇧🇩 : 192 639 | 🇧🇴 : 185 101 | 🇨🇺 : 184 050 | 🇵🇹 : 172 969 | 🇮🇪 : 165 215 | 🇩🇴 : 161 262 | 🇰🇪 : 152 411 | 🇭🇳 : 139 141 | 🇯🇴 : 136 305 | 🇸🇮 : 134 134 | 🇲🇰 : 128 681 | 🇨🇲 : 126 133 | 🇵🇾 : 123 786 | 🇹🇳 : 121 338 | 🇳🇿 : 119 518 | 🇱🇾 : 119 417 | 🇴🇲 : 110 571 | 🇰🇼 : 109 960 | 🇸🇾 : 97 801 | 🇸🇬 : 96 893 | 🇸🇻 : 96 617 | 🇳🇮 : 96 575 | 🇱🇧 : 88 391 | 🇨🇷 : 76 354 | 🇵🇦 : 63 930 | 🇺🇾 : 62 471 | 🇶🇦 : 59 632 | 🇲🇪 : 44 617 | 🇾🇪 : 42 856 | \r\nGAM vs Liquid\t\tSwiss Stage | Round 4\t\tBilbao | 🇪🇸\t\t172.2M Viewers\t\t57 100\t(🇺🇳 : 1.86M | 🇺🇳 : 3.09M) | 🇺🇸 : 58 685 441 | 🇻🇳 : 46 740 745 | 🇨🇳 : 16 073 828 | 🇩🇪 : 5 022 416 | 🇧🇷 : 4 251 420 | 🇰🇷 : 3 438 285 | 🇳🇬 : 2 535 086 | 🇮🇳 : 2 515 293 | 🇬🇧 : 2 512 293 | 🇫🇷 : 2 289 499 | 🇪🇬 : 1 674 414 | 🇮🇹 : 1 514 447 | 🇹🇼 : 1 503 362 | 🇮🇷 : 1 444 359 | 🇲🇽 : 1 332 322 | 🇪🇸 : 1 123 992 | 🇵🇱 : 1 028 994 | 🇩🇿 : 1 011 070 | 🇯🇵 : 943 293 | 🇨🇦 : 911 134 | 🇹🇷 : 762 154 | 🇸🇦 : 731 700 | 🇨🇴 : 584 476 | 🇮🇶 : 581 933 | 🇦🇷 : 555 465 | 🇿🇦 : 507 102 | 🇭🇰 : 500 547 | 🇦🇹 : 493 422 | 🇲🇦 : 487 339 | 🇦🇺 : 465 315 | 🇨🇭 : 461 758 | 🇨🇿 : 431 229 | 🇳🇱 : 428 586 | 🇷🇸 : 369 076 | 🇻🇪 : 338 570 | 🇨🇩 : 327 956 | 🇵🇪 : 323 000 | 🇬🇭 : 298 081 | 🇭🇺 : 276 786 | 🇸🇪 : 269 307 | 🇧🇪 : 252 054 | 🇦🇪 : 202 694 | 🇷🇴 : 196 370 | 🇿🇼 : 195 349 | 🇸🇩 : 195 306 | 🇵🇹 : 195 280 | 🇸🇰 : 194 973 | 🇬🇹 : 193 090 | 🇵🇰 : 191 767 | 🇨🇱 : 186 843 | 🇪🇨 : 176 857 | 🇱🇰 : 169 895 | 🇩🇰 : 167 538 | 🇭🇷 : 157 025 | 🇳🇴 : 151 758 | 🇧🇩 : 150 550 | 🇮🇪 : 134 731 | 🇰🇪 : 128 018 | 🇨🇺 : 126 597 | 🇱🇾 : 124 676 | 🇧🇦 : 123 839 | 🇹🇳 : 122 173 | 🇯🇴 : 116 492 | 🇰🇼 : 112 524 | 🇧🇴 : 112 446 | 🇩🇴 : 107 761 | 🇴🇲 : 106 454 | 🇨🇲 : 102 860 | 🇸🇾 : 98 542 | 🇭🇳 : 98 390 | 🇳🇿 : 90 312 | 🇵🇾 : 81 211 | 🇸🇮 : 80 077 | 🇱🇧 : 78 434 | 🇸🇬 : 70 658 | 🇲🇰 : 67 450 | 🇳🇮 : 61 826 | 🇸🇻 : 55 986 | 🇨🇷 : 55 702 | 🇶🇦 : 46 940 | 🇵🇦 : 44 486 | 🇺🇾 : 43 445 | 🇾🇪 : 40 482 | 🇲🇪 : 21 098 | \r\nDK vs WBG\t\tSwiss Stage | Round 5\t\tMalaga | 🇪🇸\t\t184.1M Viewers\t\t53 000\t(🇺🇳 : 2.21M | 🇺🇳 : 7.07M) | 🇨🇳 : 86 135 196 | 🇻🇳 : 15 220 182 | 🇰🇷 : 12 345 681 | 🇺🇸 : 8 963 661 | 🇩🇪 : 8 318 848 | 🇫🇷 : 3 739 042 | 🇬🇧 : 3 198 591 | 🇳🇬 : 3 142 224 | 🇮🇳 : 2 998 142 | 🇧🇷 : 2 968 520 | 🇵🇱 : 2 749 218 | 🇹🇼 : 2 484 975 | 🇹🇷 : 2 030 724 | 🇮🇷 : 1 774 980 | 🇯🇵 : 1 635 038 | 🇩🇿 : 1 630 836 | 🇮🇹 : 1 517 177 | 🇲🇽 : 1 375 321 | 🇨🇦 : 1 337 008 | 🇪🇬 : 1 147 707 | 🇪🇸 : 1 123 628 | 🇸🇦 : 1 033 113 | 🇭🇰 : 826 469 | 🇨🇭 : 821 660 | 🇮🇶 : 799 549 | 🇲🇦 : 745 379 | 🇦🇹 : 712 290 | 🇨🇩 : 675 691 | 🇿🇦 : 658 290 | 🇨🇿 : 652 329 | 🇦🇺 : 643 315 | 🇨🇴 : 634 368 | 🇦🇷 : 579 693 | 🇧🇪 : 554 693 | 🇳🇱 : 541 219 | 🇷🇸 : 499 105 | 🇵🇪 : 407 469 | 🇻🇪 : 371 365 | 🇬🇭 : 368 869 | 🇸🇪 : 312 980 | 🇸🇰 : 299 158 | 🇬🇷 : 278 938 | 🇦🇪 : 264 456 | 🇭🇷 : 247 882 | 🇿🇼 : 246 281 | 🇸🇩 : 242 024 | 🇵🇰 : 237 350 | 🇱🇰 : 220 548 | 🇬🇹 : 217 317 | 🇧🇩 : 214 672 | 🇳🇴 : 213 478 | 🇷🇴 : 208 653 | 🇩🇰 : 205 405 | 🇨🇱 : 203 290 | 🇪🇨 : 190 053 | 🇧🇦 : 187 070 | 🇮🇪 : 186 966 | 🇹🇳 : 184 950 | 🇯🇴 : 155 052 | 🇰🇪 : 149 334 | 🇱🇾 : 148 527 | 🇵🇹 : 132 654 | 🇰🇼 : 132 398 | 🇸🇾 : 128 399 | 🇨🇲 : 123 482 | 🇴🇲 : 122 892 | 🇨🇺 : 119 771 | 🇳🇿 : 119 495 | 🇸🇮 : 117 840 | 🇱🇧 : 116 963 | 🇩🇴 : 109 053 | 🇧🇴 : 106 682 | 🇲🇰 : 102 319 | 🇸🇬 : 97 806 | 🇭🇳 : 93 347 | 🇵🇾 : 76 604 | 🇶🇦 : 76 587 | 🇳🇮 : 72 939 | 🇸🇻 : 68 701 | 🇾🇪 : 62 494 | 🇨🇷 : 52 699 | 🇵🇦 : 47 819 | 🇺🇾 : 44 451 | 🇲🇪 : 36 101 | \r\nBLG vs G2\t\tSwiss Stage | Round 5\t\tValence | 🇪🇸\t\t217.7M Viewers\t\t62 300\t(🇺🇳 : 2.34M | 🇺🇳 : 6.09M) | 🇨🇳 : 72 330 657 | 🇩🇪 : 24 534 466 | 🇺🇸 : 13 895 445 | 🇻🇳 : 13 037 370 | 🇫🇷 : 7 077 851 | 🇰🇷 : 6 715 251 | 🇧🇷 : 5 109 352 | 🇳🇬 : 5 109 295 | 🇮🇳 : 4 315 477 | 🇬🇧 : 4 293 414 | 🇵🇱 : 3 622 480 | 🇮🇹 : 3 611 374 | 🇲🇽 : 3 391 498 | 🇪🇸 : 2 932 239 | 🇹🇷 : 2 653 428 | 🇩🇿 : 2 512 016 | 🇨🇦 : 2 381 145 | 🇮🇷 : 1 898 427 | 🇨🇿 : 1 723 358 | 🇪🇬 : 1 702 441 | 🇷🇸 : 1 599 333 | 🇦🇷 : 1 432 224 | 🇯🇵 : 1 335 867 | 🇲🇦 : 1 295 578 | 🇨🇭 : 1 282 100 | 🇨🇴 : 1 196 031 | 🇦🇹 : 1 159 697 | 🇨🇩 : 1 126 602 | 🇦🇺 : 1 029 557 | 🇿🇦 : 1 015 214 | 🇹🇼 : 973 438 | 🇸🇦 : 961 728 | 🇸🇰 : 871 013 | 🇳🇱 : 810 356 | 🇧🇪 : 795 070 | 🇮🇶 : 770 353 | 🇻🇪 : 754 096 | 🇵🇪 : 750 545 | 🇭🇷 : 722 532 | 🇧🇦 : 649 928 | 🇭🇺 : 535 120 | 🇬🇭 : 516 196 | 🇸🇪 : 482 677 | 🇬🇹 : 464 854 | 🇸🇩 : 436 781 | 🇨🇱 : 420 305 | 🇪🇨 : 414 064 | 🇷🇴 : 364 218 | 🇵🇰 : 362 588 | 🇧🇩 : 327 973 | 🇱🇰 : 324 381 | 🇿🇼 : 317 092 | 🇭🇰 : 314 232 | 🇸🇮 : 307 719 | 🇳🇴 : 292 980 | 🇩🇰 : 291 433 | 🇵🇹 : 271 774 | 🇲🇰 : 265 980 | 🇮🇪 : 263 144 | 🇦🇪 : 263 079 | 🇨🇺 : 244 801 | 🇧🇴 : 232 427 | 🇩🇴 : 230 167 | 🇰🇪 : 213 852 | 🇭🇳 : 205 407 | 🇨🇲 : 200 563 | 🇵🇾 : 184 650 | 🇹🇳 : 184 222 | 🇬🇷 : 175 567 | 🇳🇿 : 174 141 | 🇱🇾 : 173 672 | 🇯🇴 : 167 619 | 🇸🇻 : 153 875 | 🇸🇾 : 147 331 | 🇸🇬 : 146 527 | 🇰🇼 : 140 504 | 🇳🇮 : 137 519 | 🇴🇲 : 133 162 | 🇱🇧 : 114 133 | 🇨🇷 : 110 080 | 🇵🇦 : 105 194 | 🇺🇾 : 95 876 | 🇲🇪 : 90 433 | 🇶🇦 : 70 582 | 🇾🇪 : 52 455 | \"\"\"\r\n\r\ncompet_str=\"\"\"(🇺🇳 : 309.6K | 🇺🇳 : 792.2K) | 🇷🇺 : 6 720 769 | 🇨🇳 : 6 317 848 | 🇺🇸 : 2 638 263 | 🇧🇷 : 1 686 250 | 🇹🇷 : 1 516 258 | 🇺🇦 : 1 497 462 | 🇳🇬 : 1 211 120 | 🇵🇱 : 906 057 | 🇮🇳 : 879 809 | 🇫🇷 : 868 812 | 🇰🇿 : 814 283 | 🇬🇧 : 752 118 | 🇩🇪 : 586 265 | 🇮🇷 : 545 088 | 🇪🇬 : 441 478 | 🇸🇦 : 336 532 | 🇦🇿 : 302 036 | 🇧🇾 : 289 905 | 🇭🇺 : 272 843 | 🇷🇴 : 251 583 | 🇮🇶 : 242 872 | 🇿🇦 : 214 783 | 🇻🇳 : 213 066 | 🇺🇿 : 207 078 | 🇦🇺 : 199 383 | 🇩🇿 : 187 933 | 🇨🇦 : 184 430 | 🇫🇮 : 147 335 | 🇳🇱 : 135 492 | 🇰🇬 : 126 844 | 🇦🇲 : 126 415 | 🇬🇭 : 120 597 | 🇲🇦 : 102 760 | 🇨🇿 : 98 252 | 🇸🇩 : 87 887 | 🇸🇪 : 86 976 | 🇦🇪 : 80 342 | 🇿🇼 : 77 716 | 🇵🇰 : 66 265 | 🇱🇰 : 64 860 | 🇵🇹 : 63 908 | 🇷🇸 : 63 362 | 🇦🇹 : 63 051 | 🇧🇩 : 59 941 | 🇰🇪 : 54 179 | 🇹🇳 : 50 747 | 🇩🇰 : 50 001 | 🇯🇴 : 49 480 | 🇳🇴 : 48 869 | 🇱🇾 : 48 010 | 🇨🇲 : 47 286 | 🇲🇽 : 46 977 | 🇨🇩 : 46 330 | 🇮🇪 : 46 152 | 🇰🇼 : 44 740 | 🇸🇾 : 42 055 | 🇴🇲 : 39 425 | 🇸🇰 : 38 779 | 🇳🇿 : 37 897 | 🇱🇧 : 33 733 | 🇭🇷 : 30 662 | 🇧🇪 : 29 534 | 🇸🇬 : 29 289 | 🇲🇩 : 26 350 | 🇧🇦 : 25 520 | 🇲🇳 : 25 025 | 🇶🇦 : 21 208 | 🇨🇭 : 20 302 | 🇦🇷 : 18 740 | 🇨🇴 : 18 018 | 🇾🇪 : 17 346 | 🇪🇸 : 16 690 | 🇸🇮 : 14 458 | 🇲🇰 : 12 660 | 🇻🇪 : 11 387 | 🇵🇪 : 11 067 | 🇨🇱 : 6 229 | 🇬🇹 : 5 925 | 🇪🇨 : 5 586 | 🇲🇪 : 4 347 | 🇨🇺 : 3 522 | 🇧🇴 : 3 475 | 🇩🇴 : 3 415 | 🇭🇳 : 2 783 | 🇵🇾 : 2 524 | 🇳🇮 : 2 129 | 🇸🇻 : 1 857 | 🇨🇷 : 1 673 | 🇵🇦 : 1 455 | 🇺🇾 : 1 302\r\n(🇺🇳 : 143.2K | 🇺🇳 : 649.2K) | 🇨🇳 : 6 623 255 | 🇺🇸 : 6 364 488 | 🇷🇺 : 1 848 720 | 🇳🇬 : 751 186 | 🇹🇷 : 657 157 | 🇺🇦 : 549 912 | 🇬🇧 : 526 199 | 🇪🇬 : 408 971 | 🇮🇷 : 355 069 | 🇮🇳 : 338 210 | 🇰🇿 : 246 784 | 🇷🇴 : 219 548 | 🇩🇰 : 162 620 | 🇻🇳 : 151 087 | 🇮🇶 : 149 426 | 🇦🇺 : 145 114 | 🇿🇦 : 138 336 | 🇸🇦 : 133 668 | 🇨🇦 : 116 351 | 🇫🇷 : 107 520 | 🇧🇾 : 100 744 | 🇦🇿 : 100 340 | 🇩🇿 : 97 438 | 🇳🇱 : 95 102 | 🇺🇿 : 82 511 | 🇬🇭 : 75 118 | 🇲🇦 : 61 051 | 🇫🇮 : 55 995 | 🇸🇩 : 54 820 | 🇸🇪 : 54 253 | 🇦🇪 : 50 904 | 🇿🇼 : 48 636 | 🇰🇬 : 47 545 | 🇦🇲 : 44 841 | 🇳🇴 : 34 471 | 🇰🇪 : 32 088 | 🇲🇩 : 28 890 | 🇨🇲 : 27 662 | 🇱🇾 : 27 572 | 🇹🇳 : 27 179 | 🇮🇪 : 27 126 | 🇯🇴 : 26 748 | 🇵🇰 : 26 026 | 🇸🇾 : 25 039 | 🇰🇼 : 24 870 | 🇲🇽 : 24 712 | 🇳🇿 : 24 028 | 🇴🇲 : 24 027 | 🇨🇩 : 23 353 | 🇧🇩 : 21 987 | 🇱🇰 : 21 249 | 🇨🇿 : 20 987 | 🇱🇧 : 20 375 | 🇧🇪 : 14 334 | 🇶🇦 : 13 456 | 🇾🇪 : 10 682 | 🇨🇭 : 10 387 | 🇦🇷 : 9 771 | 🇨🇴 : 9 691 | 🇸🇬 : 9 589 | 🇪🇸 : 8 211 | 🇵🇪 : 5 885 | 🇻🇪 : 5 672 | 🇬🇹 : 3 352 | 🇨🇱 : 3 103 | 🇪🇨 : 2 649 | 🇩🇴 : 1 910 | 🇧🇴 : 1 883 | 🇨🇺 : 1 847 | 🇭🇳 : 1 367 | 🇵🇾 : 1 357 | 🇳🇮 : 1 179 | 🇸🇻 : 901 | 🇨🇷 : 771 | 🇵🇦 : 666 | 🇺🇾 : 637 | 🇦🇲\r\n(🇺🇳 : 377.1K | 🇺🇳 : 1.68M) | 🇨🇳 : 17 016 268 | 🇺🇸 : 15 764 658 | 🇷🇺 : 6 919 655 | 🇵🇱 : 2 347 276 | 🇪🇬 : 2 344 141 | 🇸🇦 : 1 980 493 | 🇮🇷 : 1 670 687 | 🇳🇬 : 1 543 476 | 🇺🇦 : 1 363 981 | 🇧🇷 : 1 329 343 | 🇰🇿 : 962 665 | 🇬🇧 : 884 001 | 🇮🇶 : 774 487 | 🇮🇳 : 658 853 | 🇦🇿 : 425 320 | 🇹🇷 : 377 252 | 🇧🇾 : 353 632 | 🇩🇿 : 342 912 | 🇷🇴 : 325 805 | 🇿🇦 : 294 541 | 🇻🇳 : 292 886 | 🇺🇿 : 282 571 | 🇦🇪 : 261 377 | 🇦🇺 : 251 810 | 🇭🇺 : 246 607 | 🇲🇦 : 240 640 | 🇨🇿 : 223 900 | 🇨🇦 : 216 941 | 🇷🇸 : 184 362 | 🇫🇷 : 177 999 | 🇰🇬 : 177 234 | 🇦🇲 : 172 270 | 🇱🇾 : 160 329 | 🇹🇳 : 156 154 | 🇬🇭 : 154 347 | 🇳🇱 : 150 165 | 🇯🇴 : 139 985 | 🇸🇾 : 132 302 | 🇰🇼 : 130 157 | 🇴🇲 : 128 209 | 🇸🇩 : 117 506 | 🇱🇧 : 113 879 | 🇸🇪 : 110 303 | 🇸🇰 : 106 457 | 🇿🇼 : 101 095 | 🇭🇷 : 76 121 | 🇵🇹 : 72 174 | 🇧🇦 : 71 514 | 🇰🇪 : 64 090 | 🇫🇮 : 63 391 | 🇩🇰 : 61 962 | 🇶🇦 : 61 462 | 🇳🇴 : 57 836 | 🇨🇲 : 52 899 | 🇮🇪 : 52 451 | 🇾🇪 : 51 763 | 🇲🇽 : 47 966 | 🇧🇩 : 45 868 | 🇳🇿 : 44 558 | 🇵🇰 : 42 660 | 🇱🇰 : 42 364 | 🇸🇮 : 35 897 | 🇲🇩 : 34 059 | 🇨🇩 : 31 989 | 🇲🇰 : 30 382 | 🇧🇪 : 24 169 | 🇦🇷 : 22 059 | 🇨🇴 : 18 938 | 🇪🇸 : 18 742 | 🇸🇬 : 18 535 | 🇨🇭 : 15 493 | 🇻🇪 : 12 935 | 🇵🇪 : 12 906 | 🇲🇪 : 11 124 | 🇬🇹 : 7 224 | 🇨🇱 : 6 798 | 🇪🇨 : 6 493 | 🇨🇺 : 4 600 | 🇩🇴 : 4 271 | 🇧🇴 : 4 211 | 🇭🇳 : 2 962 | 🇵🇾 : 2 951 | 🇳🇮 : 2 443 | 🇸🇻 : 2 370 | 🇨🇷 : 1 761 | 🇵🇦 : 1 665 | 🇺🇾 : 1 656 | \"\"\"\r\n\r\n#Stade : 4% minimum, prix total / League 20%\r\n#Organisation : LPL : 4%, VCT : 3%, CSGO : 3%, World : 6%\r\n#Cash Prize : World {tous les jeux} : 65%, LPL : 55%, MSI : 40%, ESL, IEM ... : 60%, le reste : 60%~50%, Arabie Saoudite 85%\r\nif __name__ == \"__main__\":\r\n    #compet( données CVT | audience moyenne (escharts) | match en stade (hors club) | affluence moyenne de ces stades | hours watched (escharts) | invest stade | invest orga | invest cashprize):\r\n    compet(compet_str,198481,41,34280,14274037,500000000,0.05,0.6)\r\n    #modif_pr_escharts ( données matches | Plus grand au plus petit | nombre de match (ex: 5 ou -1 pour tous) | pays '' occasionel )\r\n    #modif_pr_escharts(escharts_str,True,-1,\"🇺🇳\")\r\n",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1744647576,
          "nanos_since_epoch": 276565700
        }
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\Stats.txt",
        "content": "\r\nReal Viewers <- Huya Viewers\r\n0,6816 <- LPL\r\n0,831 <- LPL [20.450M / OMG vs TES]\r\n0.705 <- LPL [29.209M / BLG vs EDG]\r\n0,186  [9250 / Huya -> Huya+Douyu] KPL\r\n\r\nVALO [Huya] -> VALO [Huya/Douyu] 570K / 264K | *0,463\r\nVALO [Huya] -> VALO [Huya/Douyu] 721K / 347K | *0,481\r\nVALO [Huya] -> VALO [Huya/Douyu] 934K / 500K | *0,536 [with team]\r\nVALO [Huya] -> VALO [Huya/Douyu] 706K / 643K | *0,911 [with team]\r\nVALO [Huya] -> VALO [Huya/Douyu] 2.069M / 1.541M | *0,557 [with team]\r\nVALO [Huya] -> VALO [Huya/Douyu] 2.820M / 1.833M | *0,650 [with team]\r\n\r\nLPL [Huya] -> LPL [Huya/Douyu] 6.400M / 4.427M | *0,692\r\nLPL [Huya] -> LPL [Huya/Douyu] 8.237M / 2.010M | *0,242\r\nLPL [Huya] -> LPL [Huya/Douyu] 16.300M / 7.992M | *0,490\r\nLPL [Huya] -> LPL [Huya/Douyu] 17.569M / 7.501M | *0,427\r\nLPL [Huya] -> LPL [Huya/Douyu] 22.659M / 15.356M | *0,677\r\n\r\nLCK_CN | 2.200M / 176K | *0,080\r\nLCK_CN | 3.637M / 268K | *0,074\r\nLCK_CN | 6.600M / 588K | *0,089\r\n\r\nLCK_CN | 8.009M / 2.337M | *0,292 [All Broadcast]\r\n\r\nLCK_KR | 18.1K / 93.5K | *5,17\r\nLCK_KR | 30.7K / 153K | *4,94\r\nLCK_KR | 17.0K / 85.7K | *5,04\r\n\r\nLFL | 898K / 15.2K | 18h45 | *0,017\r\nLFL | 1.012M / 29.4K | 18h45 | *0,029\r\n\r\nLFL \r\n\r\n\r\nLFL  | 38.9K / 455   | 19h58 | *0.085\r\nLFL  | 65.8K / 1547  | 20h53 | *0.042\r\nESLS16 | 1.960M / 5554 | 16h36 | *0.35\r\nESLS16 | 1.047M / 3806 | 17h04 | *0.27\r\nESLS16 | 4.393M / 9663 | 17h04 | *0.455\r\nESLS16 | 2.004M / 5351 | 17h28 | *0.37\r\nESLS16 | 2.552M / 7086 | 17h28 | *0.36\r\nESLS16 | 4.415M / 9155 | 18h22 | *0.482\r\nESLS16 | 2.405M / 9041 | 19h18 | *0.266\r\nESLS16 | 743.3K / 4687 | 19h31 | *0.158\r\nESLS16 | 823.8K / 4278 | 19h38 | *0.19\r\nESLS16 | 1.378M / 6783 | 19h47 | *0,203\r\nESLS16 | 331.9K / 1898 | 22h04 | *0.17\r\nIEMRIO | 3.095M / 7672 | 16h55 | *0.403\r\nIEMRIO | 1.546M / 5786 | 19h50 | *0,267\r\nIEMRIO | 2.146M / 5555 | 18h20 | *0,386\r\nIEMRIO | 2.462M / 7059 | 19h38 | *0.342\r\nIEMRIO | 627.2K / 4530 | 00h26 | *0.138\r\nLPL  | 810.8K / 7071 | 8h50  | *0,115\r\nLPL  | 508.1K / 4957 | 9h00  | *0,103\r\nLPL  | 445.3M / 4809 | 10h21 | *0,096\r\nLPL  | 1.037M / 9308 | 10h48 | *0.113\r\nLPL  | 781.4K / 7209 | 10h52 | *0.108\r\nLPL  | 1.382M / 12210| 12h15 | *0,114\r\nLPL  | 1.693M / 22000| 14h03 | *0,109\r\nLEC  | 27.0K / 633   | 18h55 | *0,042\r\nLEC  | 50.1K / 1210  | 19h36 | *0,041\r\nLEC  | 62.0K / 1489  |`21h06 | *0,0416\r\n------ With the second channel ------\r\nLEC  | 63.0K / 1700  | 19h40 | *0,039\r\nLEC  | 91.1K / 2180  | 20h15 | *0.042\r\nLEC  | 109.3K/ 2515  | 20h27 | *0.043\r\nLCKKR| 71,4 / 18,1   |\t     | *3,945 \r\nLCKKR| 64,7 / 27,4   |       | *4,235\r\nLCKKR| 398,1  / 97,2 |       | *4,1\r\nLCKKR| 480,1  / 112,4|       | *4,271\r\nLCK  | 690K  / 5636  | 12h25 | *0,122\r\nLCK  | 1.235M / 10824| 10h30 | *0,114\r\nLCK  | 1.068M / 8140 | 11h50 | *0,131\r\nKPL  | 1.141M/ 9650  | 13h50 | *0,118\r\nVRLE | 19.4K / 41.5K | 21h10 | *0,214\r\nCBLOL| 39.5K / 438   | 23h10 | *0,090\r\nDOTAE| 262.8K / 4574 | 16h00 | *0,055\r\nDOTAE| 163.1K / 4008 | 21h21 | *0,041\r\nDOTAE| 477.8K / 4829 | 15h05 | *0,099\r\n///\r\nMSI :\r\n\r\nLPL [Huya] -> LPL [Huya/Douyu] 5.676M / 2.483M | 17h12 | *0,437\r\nLPL [Huya] -> LPL [Huya/Douyu] 7.524M / 3.026M | 15h52 | *0,402 \r\nLPL [Huya] -> LPL [Huya/Douyu] 13.767M / 5.134M | 15h18 | *0,373 (with team)\r\nLPL [Huya] -> LPL [Huya/Douyu] 16.374M / 5.900M | 16h27 | *0,360 (with team)\r\nLPL [Huya] -> LPL [Huya/Douyu] 22.237M / 7.813M | 16h39 | *0,351 (with team)\r\nLPL [Huya] -> LPL [Huya/Douyu] 46.815M / 12.830M | 17h00 | *0,274 (with team)\r\n-------\r\n\r\n",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1687082768,
          "nanos_since_epoch": 162666400
        }
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\telegram_interface.py",
        "content": "import tkinter as tk\r\nfrom tkinter import ttk\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport threading\r\nimport asyncio\r\nimport datetime\r\nimport time\r\nfrom telethon import TelegramClient\r\nfrom telethon.tl.functions.channels import GetFullChannelRequest\r\nfrom telethon.tl.functions.phone import GetGroupCallRequest\r\nimport matplotlib.dates as mdates\r\nimport mplcursors  # Importer mplcursors pour l'interactivité\r\n\r\n# Remplacez ces valeurs par vos propres identifiants\r\napi_id = '15370596'\r\napi_hash = '36ca62e65c3fbf8c8cb6d397cfc3f3ea'\r\nphone_number = '+33635933310'\r\n\r\n# Initialisation du client Telegram\r\nclient = TelegramClient('session', api_id, api_hash)\r\n\r\n# Dictionnaire pour stocker les données de chaque stream\r\nstreams_data = {}\r\n\r\n# Fonction pour ajouter un stream à suivre\r\ndef add_stream():\r\n    channel_name = stream_entry.get()\r\n    if channel_name and channel_name not in streams_data:\r\n        streams_data[channel_name] = {'Time': [], 'Viewers': []}\r\n        update_listbox()\r\n        stream_entry.delete(0, tk.END)\r\n\r\n# Fonction pour mettre à jour les éléments de la Listbox\r\ndef update_listbox():\r\n    stream_combobox.delete(0, tk.END)  # Effacer la liste actuelle\r\n    for stream in streams_data.keys():\r\n        stream_combobox.insert(tk.END, stream)  # Ajouter chaque stream à la Listbox\r\n\r\n# Fonction pour tracer le graphique en additionnant les viewers des streams sélectionnés\r\ndef plot_viewers():\r\n    selected_streams = stream_combobox.curselection()\r\n    if selected_streams:\r\n        ax.clear()  # Efface le graphique précédent\r\n\r\n        # Dictionnaire pour stocker les données de chaque stream sous forme de {time: viewers}\r\n        stream_data_dicts = {}\r\n        all_times = set()\r\n\r\n        for index in selected_streams:\r\n            stream_name = stream_combobox.get(index)\r\n            stream_data = streams_data[stream_name]\r\n\r\n            if stream_data['Time'] and stream_data['Viewers']:\r\n                # Créer un dictionnaire {time: viewers} pour ce stream\r\n                time_viewers = dict(zip(stream_data['Time'], stream_data['Viewers']))\r\n                stream_data_dicts[stream_name] = time_viewers\r\n                all_times.update(stream_data['Time'])\r\n\r\n        if not all_times:\r\n            return  # Rien à tracer si aucune donnée\r\n\r\n        # Créer une liste triée de tous les temps à intervalles d'une minute\r\n        min_time = min(all_times)\r\n        max_time = max(all_times)\r\n        total_minutes = int((max_time - min_time).total_seconds() // 60) + 1\r\n        times = [min_time + datetime.timedelta(minutes=i) for i in range(total_minutes)]\r\n\r\n        # Pour chaque point temporel, sommer les viewers\r\n        total_viewers_list = []\r\n        for time_point in times:\r\n            total_viewers = 0\r\n            for stream_name in stream_data_dicts:\r\n                time_viewers = stream_data_dicts[stream_name]\r\n                if time_point in time_viewers:\r\n                    total_viewers += time_viewers[time_point]\r\n                else:\r\n                    total_viewers += 0\r\n            total_viewers_list.append(total_viewers)\r\n\r\n        # Tracer les données avec un design amélioré\r\n        ax.plot(times, total_viewers_list, marker='o', linestyle='-', color='#1f77b4')\r\n\r\n        ax.set_title(\"Somme des viewers des streams sélectionnés\", fontsize=16)\r\n        ax.set_xlabel('Temps', fontsize=14)\r\n        ax.set_ylabel('Viewers', fontsize=14)\r\n        ax.grid(True, which='both', linestyle='--', linewidth=0.5)\r\n\r\n        # Configurer le format de l'axe des x pour afficher les heures et minutes\r\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\r\n        figure.autofmt_xdate()\r\n\r\n        # Ajouter l'interactivité avec mplcursors\r\n        cursor = mplcursors.cursor(ax, hover=True)\r\n        @cursor.connect(\"add\")\r\n        def on_add(sel):\r\n            x, y = sel.target\r\n            sel.annotation.set(text=f\"Temps: {mdates.num2date(x).strftime('%H:%M')}\\nViewers: {int(y)}\")\r\n            sel.annotation.get_bbox_patch().set(fc=\"white\")\r\n\r\n        canvas.draw()\r\n\r\n# Fonction asynchrone pour obtenir le nombre de viewers en direct\r\nasync def get_live_audience(name_telegram_channel):\r\n    try:\r\n        await client.start(phone=phone_number)\r\n        channel = await client.get_entity(name_telegram_channel)\r\n        full_channel = await client(GetFullChannelRequest(channel=channel))\r\n\r\n        if full_channel.full_chat.call:\r\n            group_call = await client(GetGroupCallRequest(call=full_channel.full_chat.call, limit=1))\r\n            return group_call.call.participants_count\r\n        return 0  # Retourne 0 si le stream n'est pas en direct\r\n    except Exception as e:\r\n        print(f\"Erreur lors de la récupération du nombre de viewers pour {name_telegram_channel}: {e}\")\r\n        return 0  # Retourne 0 en cas d'erreur\r\n    finally:\r\n        await client.disconnect()\r\n\r\n# Fonction pour mettre à jour les viewers dans un thread séparé\r\ndef update_viewers(loop):\r\n    asyncio.set_event_loop(loop)\r\n    while True:\r\n        now = datetime.datetime.now()\r\n        # Calculer le temps jusqu'à la prochaine minute exacte\r\n        next_minute = (now + datetime.timedelta(minutes=1)).replace(second=0, microsecond=0)\r\n        sleep_time = (next_minute - now).total_seconds()\r\n        time.sleep(sleep_time)\r\n\r\n        current_time = datetime.datetime.now().replace(second=0, microsecond=0)\r\n        stream_names = list(streams_data.keys())\r\n        for stream_name in stream_names:\r\n            viewers = loop.run_until_complete(get_live_audience(stream_name))\r\n            streams_data[stream_name]['Time'].append(current_time)\r\n            streams_data[stream_name]['Viewers'].append(viewers)\r\n        # Mettre à jour le graphique après chaque collecte de données\r\n        plot_viewers()\r\n\r\n# Mettre à jour le graphique lorsque la sélection dans la Listbox change\r\ndef on_stream_select(event):\r\n    plot_viewers()\r\n\r\n# Démarrer un thread pour la récupération des viewers\r\ndef start_viewer_thread():\r\n    loop = asyncio.new_event_loop()\r\n    threading.Thread(target=update_viewers, args=(loop,), daemon=True).start()\r\n\r\n# Création de la fenêtre principale avec un design amélioré\r\nroot = tk.Tk()\r\nroot.title(\"Suivi des Viewers des Streams Telegram\")\r\nroot.geometry(\"1000x700\")\r\nroot.configure(bg='#f0f0f0')\r\n\r\n# Section pour ajouter un nouveau stream\r\nadd_stream_frame = tk.Frame(root, bg='#f0f0f0')\r\nadd_stream_frame.pack(pady=10)\r\n\r\nstream_entry_label = ttk.Label(add_stream_frame, text=\"Ajouter un stream (nom du canal) :\", background='#f0f0f0')\r\nstream_entry_label.pack(side=tk.LEFT)\r\n\r\nstream_entry = ttk.Entry(add_stream_frame)\r\nstream_entry.pack(side=tk.LEFT, padx=5)\r\n\r\nadd_stream_button = ttk.Button(add_stream_frame, text=\"Ajouter\", command=add_stream)\r\nadd_stream_button.pack(side=tk.LEFT, padx=10)\r\n\r\n# Listbox pour sélectionner plusieurs streams\r\nstream_label = ttk.Label(root, text=\"Choisissez un ou plusieurs streams :\", background='#f0f0f0')\r\nstream_label.pack(pady=10)\r\n\r\nstream_combobox = tk.Listbox(root, selectmode=tk.MULTIPLE, height=5)\r\nstream_combobox.pack(pady=10)\r\nstream_combobox.bind(\"<<ListboxSelect>>\", on_stream_select)\r\n\r\n# Création de la figure pour le graphique avec un style amélioré\r\nplt.style.use('ggplot')  # Remplacé par un style intégré\r\nfigure = plt.Figure(figsize=(12, 6), dpi=100)\r\nax = figure.add_subplot(111)\r\n\r\n# Canvas pour afficher le graphique\r\ncanvas = FigureCanvasTkAgg(figure, master=root)\r\ncanvas.get_tk_widget().pack()\r\n\r\n# Démarrer le thread pour la mise à jour des viewers\r\nstart_viewer_thread()\r\n\r\n# Lancer la boucle principale de l'application\r\nroot.mainloop()\r\n",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1726328335,
          "nanos_since_epoch": 93223400
        }
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\tempCodeRunnerFile.py",
        "content": "6962180",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1741026622,
          "nanos_since_epoch": 887615600
        }
      },
      {
        "kind": "Directory",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\test",
        "expanded": false,
        "include": false,
        "children": [
          {
            "kind": "Directory",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\test\\excel",
            "expanded": false,
            "include": false,
            "children": []
          },
          {
            "kind": "File",
            "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\test\\t.py",
            "content": "from openpyxl import Workbook, load_workbook\r\n\r\ndef additionner_cellules(nom_fichier_entree):\r\n    nom_fichier_entree = nom_fichier_entree + '.xlsx'\r\n    # Ouvrir le fichier Excel d'entrée\r\n    wb_entree = load_workbook(filename=nom_fichier_entree)\r\n\r\n    # Sélectionner la première feuille\r\n    ws_entree = wb_entree.active\r\n\r\n    # Récupérer les valeurs des cellules A1 et A2\r\n    a1 = ws_entree['A1'].value\r\n    a2 = ws_entree['B1'].value\r\n\r\n    # Calculer la somme des deux valeurs\r\n    somme = a1 + a2\r\n\r\n    # Créer un nouveau fichier Excel\r\n    wb_sortie = Workbook()\r\n\r\n    # Sélectionner la première feuille du nouveau fichier Excel\r\n    ws_sortie = wb_sortie.active\r\n\r\n    # Écrire la somme dans la cellule A1 du nouveau fichier Excel\r\n    ws_sortie['A1'] = somme\r\n\r\n    # Sauvegarder le nouveau fichier Excel\r\n    nom_fichier_sortie = 'new' + nom_fichier_entree + '.xlsx'\r\n    wb_sortie.save(nom_fichier_sortie)\r\n\r\n    # Fermer les deux fichiers Excel\r\n    wb_entree.close()\r\n    wb_sortie.close()\r\n",
            "include": false,
            "lastModified": {
              "secs_since_epoch": 1679257704,
              "nanos_since_epoch": 0
            }
          }
        ]
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\test excel.py",
        "content": "# Importez la bibliothèque openpyxl\r\nfrom openpyxl import load_workbook\r\n\r\n\r\n\r\n\r\n\r\ndef build_dict_logo():\r\n    '''fonction qui lit dans le fichier excel pour créer un dictionnaire de logo\r\n    pour le site escharts'''\r\n    workbook = load_workbook(filename='!NOSUPR! logo.xlsx')\r\n    sheet = workbook.active  # Ou par exemple workbook['NomDeLaFeuille']\r\n    liste_logo = {}\r\n    # Commencez à lire à partir de la première cellule de la colonne A\r\n    row = 1\r\n    while True:\r\n        cell_value = sheet[f'A{row}'].value\r\n        if cell_value is None or cell_value == '':\r\n            break  # Sortir de la boucle si la cellule est vide\r\n        logo_url = sheet[f'B{row}'].value\r\n        liste_logo[cell_value] = logo_url\r\n        row += 1  # Passer à la cellule suivante\r\n    return liste_logo",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1699374650,
          "nanos_since_epoch": 898666800
        }
      },
      {
        "kind": "File",
        "path": "C:\\Users\\elian\\OneDrive\\Documents\\Liste\\~$!NOSUPR! logo.xlsx",
        "content": "\u000eElian Ollivier                                        \u000e\u0000E\u0000l\u0000i\u0000a\u0000n\u0000 \u0000O\u0000l\u0000l\u0000i\u0000v\u0000i\u0000e\u0000r\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000",
        "include": false,
        "lastModified": {
          "secs_since_epoch": 1721656662,
          "nanos_since_epoch": 619987600
        }
      }
    ]
  }
]